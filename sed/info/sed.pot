# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2017-01-23 19:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: settitle
#: sed.texi:16
#, no-wrap
msgid "sed, a stream editor"
msgstr ""

#. type: include
#: sed.texi:21
#, no-wrap
msgid "version.texi"
msgstr ""

#. type: include
#: sed.texi:31
#, no-wrap
msgid "config.texi"
msgstr ""

#. type: copying
#: sed.texi:36
msgid ""
"This file documents version @value{VERSION} of @value{SSED}, a stream "
"editor."
msgstr ""

#. type: copying
#: sed.texi:38
msgid "Copyright @copyright{} 1998-2016 Free Software Foundation, Inc."
msgstr ""

#. type: quotation
#: sed.texi:46
msgid ""
"Permission is granted to copy, distribute and/or modify this document under "
"the terms of the GNU Free Documentation License, Version 1.3 or any later "
"version published by the Free Software Foundation; with no Invariant "
"Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the "
"license is included in the section entitled ``GNU Free Documentation "
"License''."
msgstr ""

#. type: title
#: sed.texi:52
#, no-wrap
msgid "@value{SSED}, a stream editor"
msgstr ""

#. type: subtitle
#: sed.texi:53
#, no-wrap
msgid "version @value{VERSION}, @value{UPDATED}"
msgstr ""

#. type: author
#: sed.texi:54
#, no-wrap
msgid "by Ken Pizzini, Paolo Bonzini"
msgstr ""

#. type: node
#: sed.texi:64
#, no-wrap
msgid "Top"
msgstr ""

#. type: top
#: sed.texi:65
#, no-wrap
msgid "@value{SSED}"
msgstr ""

#. type: chapter
#: sed.texi:85 sed.texi:85 sed.texi:88 sed.texi:89
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: node
#: sed.texi:85 sed.texi:105
#, no-wrap
msgid "Invoking sed"
msgstr ""

#. type: menuentry
#: sed.texi:85
msgid "Invocation"
msgstr ""

#. type: node
#: sed.texi:85 sed.texi:475
#, no-wrap
msgid "sed scripts"
msgstr ""

#. type: chapter
#: sed.texi:85 sed.texi:476
#, no-wrap
msgid "@command{sed} scripts"
msgstr ""

#. type: node
#: sed.texi:85 sed.texi:1712
#, no-wrap
msgid "sed addresses"
msgstr ""

#. type: chapter
#: sed.texi:85 sed.texi:1713
#, no-wrap
msgid "Addresses: selecting lines"
msgstr ""

#. type: node
#: sed.texi:85 sed.texi:2100
#, no-wrap
msgid "sed regular expressions"
msgstr ""

#. type: menuentry
#: sed.texi:85
msgid "Regular expressions: selecting text"
msgstr ""

#. type: node
#: sed.texi:85 sed.texi:2979
#, no-wrap
msgid "advanced sed"
msgstr ""

#. type: chapter
#: sed.texi:85 sed.texi:2980
#, no-wrap
msgid "Advanced @command{sed}: cycles and buffers"
msgstr ""

#. type: node
#: sed.texi:85 sed.texi:3178
#, no-wrap
msgid "Examples"
msgstr ""

#. type: menuentry
#: sed.texi:85
msgid "Some sample scripts"
msgstr ""

#. type: node
#: sed.texi:85 sed.texi:4485
#, no-wrap
msgid "Limitations"
msgstr ""

#. type: menuentry
#: sed.texi:85
msgid "Limitations and (non-)limitations of @value{SSED}"
msgstr ""

#. type: node
#: sed.texi:85 sed.texi:4505
#, no-wrap
msgid "Other Resources"
msgstr ""

#. type: menuentry
#: sed.texi:85
msgid "Other resources for learning about @command{sed}"
msgstr ""

#. type: chapter
#: sed.texi:85 sed.texi:4527 sed.texi:4528
#, no-wrap
msgid "Reporting Bugs"
msgstr ""

#. type: menuentry
#: sed.texi:85
msgid "Reporting bugs"
msgstr ""

#. type: appendix
#: sed.texi:85 sed.texi:4727 sed.texi:4728
#, no-wrap
msgid "GNU Free Documentation License"
msgstr ""

#. type: menuentry
#: sed.texi:85
msgid "Copying and sharing this manual"
msgstr ""

#. type: unnumbered
#: sed.texi:85 sed.texi:4734 sed.texi:4735
#, no-wrap
msgid "Concept Index"
msgstr ""

#. type: menuentry
#: sed.texi:85
msgid "A menu with all the topics in this manual."
msgstr ""

#. type: unnumbered
#: sed.texi:85 sed.texi:4743 sed.texi:4744
#, no-wrap
msgid "Command and Option Index"
msgstr ""

#. type: menuentry
#: sed.texi:85
msgid "A menu with all @command{sed} commands and command-line options."
msgstr ""

#. type: cindex
#: sed.texi:91
#, no-wrap
msgid "Stream editor"
msgstr ""

#. type: Plain text
#: sed.texi:103
msgid ""
"@command{sed} is a stream editor.  A stream editor is used to perform basic "
"text transformations on an input stream (a file or input from a pipeline).  "
"While in some ways similar to an editor which permits scripted edits (such "
"as @command{ed}), @command{sed} works by making only one pass over the "
"input(s), and is consequently more efficient.  But it is @command{sed}'s "
"ability to filter text in a pipeline which particularly distinguishes it "
"from other types of editors."
msgstr ""

#. type: chapter
#: sed.texi:106
#, no-wrap
msgid "Running sed"
msgstr ""

#. type: Plain text
#: sed.texi:111
msgid ""
"This chapter covers how to run @command{sed}. Details of @command{sed} "
"scripts and individual @command{sed} commands are discussed in the next "
"chapter."
msgstr ""

#. type: menuentry
#: sed.texi:116
msgid "Overview::"
msgstr ""

#. type: menuentry
#: sed.texi:116
msgid "Command-Line Options::"
msgstr ""

#. type: section
#: sed.texi:116 sed.texi:439 sed.texi:440
#, no-wrap
msgid "Exit status"
msgstr ""

#. type: section
#: sed.texi:119 sed.texi:120
#, no-wrap
msgid "Overview"
msgstr ""

#. type: Plain text
#: sed.texi:122
msgid "Normally @command{sed} is invoked like this:"
msgstr ""

#. type: example
#: sed.texi:125
#, no-wrap
msgid "sed SCRIPT INPUTFILE...\n"
msgstr ""

#. type: Plain text
#: sed.texi:129
msgid ""
"For example, to replace all occurrences of @samp{hello} to @samp{world} in "
"the file @file{input.txt}:"
msgstr ""

#. type: example
#: sed.texi:132 sed.texi:1749
#, no-wrap
msgid "sed 's/hello/world/' input.txt > output.txt\n"
msgstr ""

#. type: cindex
#: sed.texi:134
#, no-wrap
msgid "stdin"
msgstr ""

#. type: cindex
#: sed.texi:135
#, no-wrap
msgid "standard input"
msgstr ""

#. type: Plain text
#: sed.texi:139
msgid ""
"If you do not specify @var{INPUTFILE}, or if @var{INPUTFILE} is @file{-}, "
"@command{sed} filters the contents of the standard input. The following "
"commands are equivalent:"
msgstr ""

#. type: example
#: sed.texi:144
#, no-wrap
msgid ""
"sed 's/hello/world/' input.txt > output.txt\n"
"sed 's/hello/world/' < input.txt > output.txt\n"
"cat input.txt | sed 's/hello/world/' - > output.txt\n"
msgstr ""

#. type: cindex
#: sed.texi:146
#, no-wrap
msgid "stdout"
msgstr ""

#. type: cindex
#: sed.texi:147
#, no-wrap
msgid "output"
msgstr ""

#. type: cindex
#: sed.texi:148
#, no-wrap
msgid "standard output"
msgstr ""

#. type: cindex
#: sed.texi:149
#, no-wrap
msgid "-i, example"
msgstr ""

#. type: Plain text
#: sed.texi:155
msgid ""
"@command{sed} writes output to standard output. Use @option{-i} to edit "
"files in-place instead of printing to standard output.  See also the "
"@code{W} and @code{s///w} commands for writing output to other files. The "
"following command modifies @file{file.txt} and does not produce any output:"
msgstr ""

#. type: example
#: sed.texi:158
#, no-wrap
msgid "sed -i 's/hello/world' file.txt\n"
msgstr ""

#. type: cindex
#: sed.texi:160
#, no-wrap
msgid "-n, example"
msgstr ""

#. type: cindex
#: sed.texi:161
#, no-wrap
msgid "p, example"
msgstr ""

#. type: cindex
#: sed.texi:162
#, no-wrap
msgid "suppressing output"
msgstr ""

#. type: cindex
#: sed.texi:163
#, no-wrap
msgid "output, suppressing"
msgstr ""

#. type: Plain text
#: sed.texi:169
msgid ""
"By default @command{sed} prints all processed input (except input that has "
"been modified/deleted by commands such as @command{d}).  Use @option{-n} to "
"suppress output, and the @code{p} command to print specific lines. The "
"following command prints only line 45 of the input file:"
msgstr ""

#. type: example
#: sed.texi:172
#, no-wrap
msgid "sed -n '45p' file.txt\n"
msgstr ""

#. type: cindex
#: sed.texi:176
#, no-wrap
msgid "multiple files"
msgstr ""

#. type: cindex
#: sed.texi:177
#, no-wrap
msgid "-s, example"
msgstr ""

#. type: Plain text
#: sed.texi:182
msgid ""
"@command{sed} treats multiple input files as one long stream.  The following "
"example prints the first line of the first file (@file{one.txt}) and the "
"last line of the last file (@file{three.txt}).  Use @option{-s} to reverse "
"this behavior."
msgstr ""

#. type: example
#: sed.texi:185
#, no-wrap
msgid "sed -n  '1p ; $p' one.txt two.txt three.txt\n"
msgstr ""

#. type: cindex
#: sed.texi:188 sed.texi:555
#, no-wrap
msgid "-e, example"
msgstr ""

#. type: cindex
#: sed.texi:189
#, no-wrap
msgid "--expression, example"
msgstr ""

#. type: cindex
#: sed.texi:190 sed.texi:556
#, no-wrap
msgid "-f, example"
msgstr ""

#. type: cindex
#: sed.texi:191
#, no-wrap
msgid "--file, example"
msgstr ""

#. type: cindex
#: sed.texi:192
#, no-wrap
msgid "script parameter"
msgstr ""

#. type: cindex
#: sed.texi:193
#, no-wrap
msgid "parameters, script"
msgstr ""

#. type: Plain text
#: sed.texi:202
msgid ""
"Without @option{-e} or @option{-f} options, @command{sed} uses the first "
"non-option parameter as the @var{script}, and the following non-option "
"parameters as input files.  If @option{-e} or @option{-f} options are used "
"to specify a @var{script}, all non-option parameters are taken as input "
"files.  Options @option{-e} and @option{-f} can be combined, and can appear "
"multiple times (in which case the final effective @var{script} will be "
"concatenation of all the individual @var{script}s)."
msgstr ""

#. type: Plain text
#: sed.texi:204
msgid "The following examples are equivalent:"
msgstr ""

#. type: example
#: sed.texi:207
#, no-wrap
msgid ""
"sed 's/hello/world/' input.txt > output.txt\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:210
#, no-wrap
msgid ""
"sed -e 's/hello/world/' input.txt > output.txt\n"
"sed --expression='s/hello/world/' input.txt > output.txt\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:214
#, no-wrap
msgid ""
"echo 's/hello/world/' > myscript.sed\n"
"sed -f myscript.sed input.txt > output.txt\n"
"sed --file=myscript.sed input.txt > output.txt\n"
msgstr ""

#. type: section
#: sed.texi:217 sed.texi:218
#, no-wrap
msgid "Command-Line Options"
msgstr ""

#. type: Plain text
#: sed.texi:221
msgid "The full format for invoking @command{sed} is:"
msgstr ""

#. type: example
#: sed.texi:224
#, no-wrap
msgid "sed OPTIONS... [SCRIPT] [INPUTFILE...]\n"
msgstr ""

#. type: Plain text
#: sed.texi:227
msgid "@command{sed} may be invoked with the following command-line options:"
msgstr ""

#. type: opindex
#: sed.texi:229 sed.texi:230
#, no-wrap
msgid "--version"
msgstr ""

#. type: cindex
#: sed.texi:231
#, no-wrap
msgid "Version, printing"
msgstr ""

#. type: table
#: sed.texi:234
msgid ""
"Print out the version of @command{sed} that is being run and a copyright "
"notice, then exit."
msgstr ""

#. type: opindex
#: sed.texi:235 sed.texi:236
#, no-wrap
msgid "--help"
msgstr ""

#. type: cindex
#: sed.texi:237
#, no-wrap
msgid "Usage summary, printing"
msgstr ""

#. type: table
#: sed.texi:241
msgid ""
"Print a usage message briefly summarizing these command-line options and the "
"bug-reporting address, then exit."
msgstr ""

#. type: opindex
#: sed.texi:242 sed.texi:245
#, no-wrap
msgid "-n"
msgstr ""

#. type: opindex
#: sed.texi:243 sed.texi:246
#, no-wrap
msgid "--quiet"
msgstr ""

#. type: opindex
#: sed.texi:244 sed.texi:247
#, no-wrap
msgid "--silent"
msgstr ""

#. type: cindex
#: sed.texi:248
#, no-wrap
msgid "Disabling autoprint, from command line"
msgstr ""

#. type: table
#: sed.texi:255
msgid ""
"By default, @command{sed} prints out the pattern space at the end of each "
"cycle through the script (@pxref{Execution Cycle, , How @code{sed} works}).  "
"These options disable this automatic printing, and @command{sed} only "
"produces output when explicitly told to via the @code{p} command."
msgstr ""

#. type: item
#: sed.texi:256
#, no-wrap
msgid "-e @var{script}"
msgstr ""

#. type: itemx
#: sed.texi:257
#, no-wrap
msgid "--expression=@var{script}"
msgstr ""

#. type: opindex
#: sed.texi:258
#, no-wrap
msgid "-e"
msgstr ""

#. type: opindex
#: sed.texi:259
#, no-wrap
msgid "--expression"
msgstr ""

#. type: cindex
#: sed.texi:260
#, no-wrap
msgid "Script, from command line"
msgstr ""

#. type: table
#: sed.texi:263
msgid ""
"Add the commands in @var{script} to the set of commands to be run while "
"processing the input."
msgstr ""

#. type: item
#: sed.texi:264
#, no-wrap
msgid "-f @var{script-file}"
msgstr ""

#. type: itemx
#: sed.texi:265
#, no-wrap
msgid "--file=@var{script-file}"
msgstr ""

#. type: opindex
#: sed.texi:266
#, no-wrap
msgid "-f"
msgstr ""

#. type: opindex
#: sed.texi:267
#, no-wrap
msgid "--file"
msgstr ""

#. type: cindex
#: sed.texi:268
#, no-wrap
msgid "Script, from a file"
msgstr ""

#. type: table
#: sed.texi:271
msgid ""
"Add the commands contained in the file @var{script-file} to the set of "
"commands to be run while processing the input."
msgstr ""

#. type: item
#: sed.texi:272
#, no-wrap
msgid "-i[@var{SUFFIX}]"
msgstr ""

#. type: itemx
#: sed.texi:273
#, no-wrap
msgid "--in-place[=@var{SUFFIX}]"
msgstr ""

#. type: opindex
#: sed.texi:274
#, no-wrap
msgid "-i"
msgstr ""

#. type: opindex
#: sed.texi:275
#, no-wrap
msgid "--in-place"
msgstr ""

#. type: cindex
#: sed.texi:276
#, no-wrap
msgid "In-place editing, activating"
msgstr ""

#. type: cindex
#: sed.texi:277 sed.texi:4650
#, no-wrap
msgid "@value{SSEDEXT}, in-place editing"
msgstr ""

#. type: table
#: sed.texi:287
msgid ""
"This option specifies that files are to be edited in-place.  @value{SSED} "
"does this by creating a temporary file and sending output to this file "
"rather than to the standard output.@footnote{This applies to commands such "
"as @code{=}, @code{a}, @code{c}, @code{i}, @code{l}, @code{p}.  You can "
"still write to the standard output by using the @code{w} @cindex "
"@value{SSEDEXT}, @file{/dev/stdout} file or @code{W} commands together with "
"the @file{/dev/stdout} special file}."
msgstr ""

#. type: table
#: sed.texi:289
msgid "This option implies @option{-s}."
msgstr ""

#. type: table
#: sed.texi:296
msgid ""
"When the end of the file is reached, the temporary file is renamed to the "
"output file's original name.  The extension, if supplied, is used to modify "
"the name of the old file before renaming the temporary file, thereby making "
"a backup copy@footnote{Note that @value{SSED} creates the backup file "
"whether or not any output is actually changed.})."
msgstr ""

#. type: cindex
#: sed.texi:297
#, no-wrap
msgid "In-place editing, Perl-style backup file names"
msgstr ""

#. type: table
#: sed.texi:306
msgid ""
"This rule is followed: if the extension doesn't contain a @code{*}, then it "
"is appended to the end of the current filename as a suffix; if the extension "
"does contain one or more @code{*} characters, then @emph{each} asterisk is "
"replaced with the current filename.  This allows you to add a prefix to the "
"backup file, instead of (or in addition to) a suffix, or even to place "
"backup copies of the original files into another directory (provided the "
"directory already exists)."
msgstr ""

#. type: table
#: sed.texi:309
msgid ""
"If no extension is supplied, the original file is overwritten without making "
"a backup."
msgstr ""

#. type: item
#: sed.texi:310
#, no-wrap
msgid "-l @var{N}"
msgstr ""

#. type: itemx
#: sed.texi:311
#, no-wrap
msgid "--line-length=@var{N}"
msgstr ""

#. type: opindex
#: sed.texi:312
#, no-wrap
msgid "-l"
msgstr ""

#. type: opindex
#: sed.texi:313
#, no-wrap
msgid "--line-length"
msgstr ""

#. type: cindex
#: sed.texi:314 sed.texi:1415
#, no-wrap
msgid "Line length, setting"
msgstr ""

#. type: table
#: sed.texi:318
msgid ""
"Specify the default line-wrap length for the @code{l} command.  A length of "
"0 (zero) means to never wrap long lines.  If not specified, it is taken to "
"be 70."
msgstr ""

#. type: opindex
#: sed.texi:319 sed.texi:320
#, no-wrap
msgid "--posix"
msgstr ""

#. type: cindex
#: sed.texi:321
#, no-wrap
msgid "@value{SSEDEXT}, disabling"
msgstr ""

#. type: table
#: sed.texi:326
msgid ""
"@value{SSED} includes several extensions to @acronym{POSIX} sed.  In order "
"to simplify writing portable scripts, this option disables all the "
"extensions that this manual documents, including additional commands."
msgstr ""

#. type: cindex
#: sed.texi:326
#, no-wrap
msgid "@code{POSIXLY_CORRECT} behavior, enabling"
msgstr ""

#. type: table
#: sed.texi:334
msgid ""
"Most of the extensions accept @command{sed} programs that are outside the "
"syntax mandated by @acronym{POSIX}, but some of them (such as the behavior "
"of the @command{N} command described in @ref{Reporting Bugs}) actually "
"violate the standard.  If you want to disable only the latter kind of "
"extension, you can set the @code{POSIXLY_CORRECT} variable to a non-empty "
"value."
msgstr ""

#. type: opindex
#: sed.texi:335 sed.texi:337
#, no-wrap
msgid "-b"
msgstr ""

#. type: opindex
#: sed.texi:336 sed.texi:338
#, no-wrap
msgid "--binary"
msgstr ""

#. type: table
#: sed.texi:347
msgid ""
"This option is available on every platform, but is only effective where the "
"operating system makes a distinction between text files and binary files.  "
"When such a distinction is made---as is the case for MS-DOS, Windows, "
"Cygwin---text files are composed of lines separated by a carriage return "
"@emph{and} a line feed character, and @command{sed} does not see the ending "
"CR.  When this option is specified, @command{sed} will open input files in "
"binary mode, thus not requesting this special processing and considering "
"lines to end at a line feed."
msgstr ""

#. type: opindex
#: sed.texi:348 sed.texi:349
#, no-wrap
msgid "--follow-symlinks"
msgstr ""

#. type: table
#: sed.texi:357
msgid ""
"This option is available only on platforms that support symbolic links and "
"has an effect only if option @option{-i} is specified.  In this case, if the "
"file that is specified on the command line is a symbolic link, @command{sed} "
"will follow the link and edit the ultimate destination of the link.  The "
"default behavior is to break the symbolic link, so that the link destination "
"will not be modified."
msgstr ""

#. type: opindex
#: sed.texi:358 sed.texi:361
#, no-wrap
msgid "-E"
msgstr ""

#. type: opindex
#: sed.texi:359 sed.texi:362
#, no-wrap
msgid "-r"
msgstr ""

#. type: opindex
#: sed.texi:360 sed.texi:363
#, no-wrap
msgid "--regexp-extended"
msgstr ""

#. type: cindex
#: sed.texi:364
#, no-wrap
msgid "Extended regular expressions, choosing"
msgstr ""

#. type: cindex
#: sed.texi:365
#, no-wrap
msgid "@acronym{GNU} extensions, extended regular expressions"
msgstr ""

#. type: table
#: sed.texi:379
msgid ""
"Use extended regular expressions rather than basic regular expressions.  "
"Extended regexps are those that @command{egrep} accepts; they can be clearer "
"because they usually have fewer backslashes.  Historically this was a "
"@acronym{GNU} extension, but the @option{-E} extension has since been added "
"to the POSIX standard (http://austingroupbugs.net/view.php?id=528), so use "
"@option{-E} for portability.  GNU sed has accepted @option{-E} as an "
"undocumented option for years, and *BSD seds have accepted @option{-E} for "
"years as well, but scripts that use @option{-E} might not port to other "
"older systems.  @xref{ERE syntax, , Extended regular expressions}."
msgstr ""

#. type: opindex
#: sed.texi:381 sed.texi:383
#, no-wrap
msgid "-s"
msgstr ""

#. type: opindex
#: sed.texi:382 sed.texi:384
#, no-wrap
msgid "--separate"
msgstr ""

#. type: cindex
#: sed.texi:385
#, no-wrap
msgid "Working on separate files"
msgstr ""

#. type: table
#: sed.texi:394
msgid ""
"By default, @command{sed} will consider the files specified on the command "
"line as a single continuous long stream.  This @value{SSED} extension allows "
"the user to consider them as separate files: range addresses (such as "
"@samp{/abc/,/def/}) are not allowed to span several files, line numbers are "
"relative to the start of each file, @code{$} refers to the last line of each "
"file, and files invoked from the @code{R} commands are rewound at the start "
"of each file."
msgstr ""

#. type: opindex
#: sed.texi:395 sed.texi:396
#, no-wrap
msgid "--sandbox"
msgstr ""

#. type: cindex
#: sed.texi:397
#, no-wrap
msgid "Sandbox mode"
msgstr ""

#. type: table
#: sed.texi:402
msgid ""
"In sandbox mode, @code{e/w/r} commands are rejected - programs containing "
"them will be aborted without being run. Sandbox mode ensures @command{sed} "
"operates only on the input files designated on the command line, and cannot "
"run external programs."
msgstr ""

#. type: opindex
#: sed.texi:404 sed.texi:406
#, no-wrap
msgid "-u"
msgstr ""

#. type: opindex
#: sed.texi:405 sed.texi:407
#, no-wrap
msgid "--unbuffered"
msgstr ""

#. type: cindex
#: sed.texi:408
#, no-wrap
msgid "Unbuffered I/O, choosing"
msgstr ""

#. type: table
#: sed.texi:413
msgid ""
"Buffer both input and output as minimally as practical.  (This is "
"particularly useful if the input is coming from the likes of @samp{tail -f}, "
"and you wish to see the transformed output as soon as possible.)"
msgstr ""

#. type: opindex
#: sed.texi:414 sed.texi:417
#, no-wrap
msgid "-z"
msgstr ""

#. type: opindex
#: sed.texi:415 sed.texi:418
#, no-wrap
msgid "--null-data"
msgstr ""

#. type: opindex
#: sed.texi:416 sed.texi:419
#, no-wrap
msgid "--zero-terminated"
msgstr ""

#. type: table
#: sed.texi:424
msgid ""
"Treat the input as a set of lines, each terminated by a zero byte (the ASCII "
"@samp{NUL} character) instead of a newline.  This option can be used with "
"commands like @samp{sort -z} and @samp{find -print0} to process arbitrary "
"file names."
msgstr ""

#. type: Plain text
#: sed.texi:430
msgid ""
"If no @option{-e}, @option{-f}, @option{--expression}, or @option{--file} "
"options are given on the command-line, then the first non-option argument on "
"the command line is taken to be the @var{script} to be executed."
msgstr ""

#. type: cindex
#: sed.texi:431
#, no-wrap
msgid "Files to be processed as input"
msgstr ""

#. type: Plain text
#: sed.texi:435
msgid ""
"If any command-line parameters remain after processing the above, these "
"parameters are interpreted as the names of input files to be processed."
msgstr ""

#. type: cindex
#: sed.texi:435
#, no-wrap
msgid "Standard input, processing as input"
msgstr ""

#. type: Plain text
#: sed.texi:438
msgid ""
"A file name of @samp{-} refers to the standard input stream.  The standard "
"input will be processed if no file names are specified."
msgstr ""

#. type: cindex
#: sed.texi:441
#, no-wrap
msgid "exit status"
msgstr ""

#. type: Plain text
#: sed.texi:445
msgid ""
"An exit status of zero indicates success, and a nonzero value indicates "
"failure. @value{SSED} returns the following exit status error values:"
msgstr ""

#. type: item
#: sed.texi:447
#, no-wrap
msgid "0"
msgstr ""

#. type: table
#: sed.texi:449
msgid "Successful completion."
msgstr ""

#. type: item
#: sed.texi:450
#, no-wrap
msgid "1"
msgstr ""

#. type: table
#: sed.texi:453
msgid ""
"Invalid command, invalid syntax, invalid regular expression or a "
"@value{SSED} extension command used with @option{--posix}."
msgstr ""

#. type: item
#: sed.texi:454
#, no-wrap
msgid "2"
msgstr ""

#. type: table
#: sed.texi:458
msgid ""
"One or more of the input file specified on the command line could not be "
"opened (e.g. if a file is not found, or read permission is denied).  "
"Processing continued with other files."
msgstr ""

#. type: item
#: sed.texi:459
#, no-wrap
msgid "4"
msgstr ""

#. type: table
#: sed.texi:462
msgid ""
"An I/O error, or a serious processing error during runtime, @value{SSED} "
"aborted immediately."
msgstr ""

#. type: cindex
#: sed.texi:464
#, no-wrap
msgid "Q, example"
msgstr ""

#. type: cindex
#: sed.texi:465
#, no-wrap
msgid "exit status, example"
msgstr ""

#. type: Plain text
#: sed.texi:468
msgid ""
"Additionally, the commands @code{q} and @code{Q} can be used to terminate "
"@command{sed} with a custom exit code value (this is a @value{SSED} "
"extension):"
msgstr ""

#. type: example
#: sed.texi:472
#, no-wrap
msgid ""
"$ echo | sed 'Q42' ; echo $?\n"
"42\n"
msgstr ""

#. type: node
#: sed.texi:487 sed.texi:489
#, no-wrap
msgid "sed script overview"
msgstr ""

#. type: section
#: sed.texi:487 sed.texi:490
#, no-wrap
msgid "@command{sed} script overview"
msgstr ""

#. type: node
#: sed.texi:487 sed.texi:592
#, no-wrap
msgid "sed commands list"
msgstr ""

#. type: section
#: sed.texi:487 sed.texi:593
#, no-wrap
msgid "@command{sed} commands summary"
msgstr ""

#. type: node
#: sed.texi:487 sed.texi:769
#, no-wrap
msgid "The \"s\" Command"
msgstr ""

#. type: menuentry
#: sed.texi:487
msgid "@command{sed}'s Swiss Army Knife"
msgstr ""

#. type: node
#: sed.texi:487 sed.texi:957
#, no-wrap
msgid "Common Commands"
msgstr ""

#. type: menuentry
#: sed.texi:487
msgid "Often used commands"
msgstr ""

#. type: node
#: sed.texi:487 sed.texi:1099
#, no-wrap
msgid "Other Commands"
msgstr ""

#. type: menuentry
#: sed.texi:487
msgid "Less frequently used commands"
msgstr ""

#. type: node
#: sed.texi:487 sed.texi:1545
#, no-wrap
msgid "Programming Commands"
msgstr ""

#. type: section
#: sed.texi:487 sed.texi:1546
#, no-wrap
msgid "Commands for @command{sed} gurus"
msgstr ""

#. type: node
#: sed.texi:487 sed.texi:1581
#, no-wrap
msgid "Extended Commands"
msgstr ""

#. type: menuentry
#: sed.texi:487
msgid "Commands specific of @value{SSED}"
msgstr ""

#. type: cindex
#: sed.texi:492
#, no-wrap
msgid "@command{sed} script structure"
msgstr ""

#. type: cindex
#: sed.texi:493
#, no-wrap
msgid "Script structure"
msgstr ""

#. type: Plain text
#: sed.texi:504
msgid ""
"A @command{sed} program consists of one or more @command{sed} commands, "
"passed in by one or more of the @option{-e}, @option{-f}, "
"@option{--expression}, and @option{--file} options, or the first non-option "
"argument if zero of these options are used.  This document will refer to "
"``the'' @command{sed} script; this is understood to mean the in-order "
"concatenation of all of the @var{script}s and @var{script-file}s passed in.  "
"@xref{Overview}."
msgstr ""

#. type: cindex
#: sed.texi:506
#, no-wrap
msgid "@command{sed} commands syntax"
msgstr ""

#. type: cindex
#: sed.texi:507
#, no-wrap
msgid "syntax, @command{sed} commands"
msgstr ""

#. type: cindex
#: sed.texi:508
#, no-wrap
msgid "addresses, syntax"
msgstr ""

#. type: cindex
#: sed.texi:509
#, no-wrap
msgid "syntax, addresses"
msgstr ""

#. type: Plain text
#: sed.texi:511
msgid "@command{sed} commands follow this syntax:"
msgstr ""

#. type: example
#: sed.texi:514
#, no-wrap
msgid "[addr]@var{X}[options]\n"
msgstr ""

#. type: Plain text
#: sed.texi:523
msgid ""
"@var{X} is a single-letter @command{sed} command.  @code{[addr]} is an "
"optional line address. If @code{[addr]} is specified, the command @var{X} "
"will be executed only on the matched lines.  @code{[addr]} can be a single "
"line number, a regular expression, or a range of lines (@pxref{sed "
"addresses}).  Additional @code{[options]} are used for some @command{sed} "
"commands."
msgstr ""

#. type: cindex
#: sed.texi:524
#, no-wrap
msgid "@command{d}, example"
msgstr ""

#. type: cindex
#: sed.texi:525
#, no-wrap
msgid "address range, example"
msgstr ""

#. type: cindex
#: sed.texi:526
#, no-wrap
msgid "example, address range"
msgstr ""

#. type: Plain text
#: sed.texi:529
msgid ""
"The following example deletes lines 30 to 35 in the input.  @code{30,35} is "
"an address range. @command{d} is the delete command:"
msgstr ""

#. type: example
#: sed.texi:532
#, no-wrap
msgid "sed '30,35d' input.txt > output.txt\n"
msgstr ""

#. type: cindex
#: sed.texi:534
#, no-wrap
msgid "@command{q}, example"
msgstr ""

#. type: cindex
#: sed.texi:535
#, no-wrap
msgid "regular expression, example"
msgstr ""

#. type: cindex
#: sed.texi:536
#, no-wrap
msgid "example, regular expression"
msgstr ""

#. type: Plain text
#: sed.texi:544
msgid ""
"The following example prints all input until a line starting with the word "
"@samp{foo} is found. If such line is found, @command{sed} will terminate "
"with exit status 42.  If such line was not found (and no other error "
"occurred), @command{sed} will exit with status 0.  @code{/^foo/} is a "
"regular-expression address.  @command{q} is the quit command. @code{42} is "
"the command option."
msgstr ""

#. type: example
#: sed.texi:547
#, no-wrap
msgid "sed '/^foo/q42' input.txt > output.txt\n"
msgstr ""

#. type: cindex
#: sed.texi:550
#, no-wrap
msgid "multiple @command{sed} commands"
msgstr ""

#. type: cindex
#: sed.texi:551
#, no-wrap
msgid "@command{sed} commands, multiple"
msgstr ""

#. type: cindex
#: sed.texi:552
#, no-wrap
msgid "newline, command separator"
msgstr ""

#. type: cindex
#: sed.texi:553
#, no-wrap
msgid "semicolons, command separator"
msgstr ""

#. type: cindex
#: sed.texi:554
#, no-wrap
msgid ";, command separator"
msgstr ""

#. type: Plain text
#: sed.texi:561
msgid ""
"Commands within a @var{script} or @var{script-file} can be separated by "
"semicolons (@code{;}) or newlines (ASCII 10).  Multiple scripts can be "
"specified with @option{-e} or @option{-f} options."
msgstr ""

#. type: Plain text
#: sed.texi:565
msgid ""
"The following examples are all equivalent. They perform two @command{sed} "
"operations: deleting any lines matching the regular expression "
"@code{/^foo/}, and replacing all occurrences of the string @samp{hello} with "
"@samp{world}:"
msgstr ""

#. type: example
#: sed.texi:568
#, no-wrap
msgid ""
"sed '/^foo/d ; s/hello/world/' input.txt > output.txt\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:570
#, no-wrap
msgid ""
"sed -e '/^foo/d' -e 's/hello/world/' input.txt > output.txt\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:574
#, no-wrap
msgid ""
"echo '/^foo/d' > script.sed\n"
"echo 's/hello/world/' >> script.sed\n"
"sed -f script.sed input.txt > output.txt\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:577
#, no-wrap
msgid ""
"echo 's/hello/world/' > script2.sed\n"
"sed -e '/^foo/d' -f script2.sed input.txt > output.txt\n"
msgstr ""

#. type: cindex
#: sed.texi:580
#, no-wrap
msgid "@command{a}, and semicolons"
msgstr ""

#. type: cindex
#: sed.texi:581
#, no-wrap
msgid "@command{c}, and semicolons"
msgstr ""

#. type: cindex
#: sed.texi:582
#, no-wrap
msgid "@command{i}, and semicolons"
msgstr ""

#. type: Plain text
#: sed.texi:589
msgid ""
"Commands @command{a}, @command{c}, @command{i}, due to their syntax, cannot "
"be followed by semicolons working as command separators and thus should be "
"terminated with newlines or be placed at the end of a @var{script} or "
"@var{script-file}.  Commands can also be preceded with optional "
"non-significant whitespace characters."
msgstr ""

#. type: Plain text
#: sed.texi:599
msgid ""
"The following commands are supported in @value{SSED}.  Some are standard "
"POSIX commands, while other are @value{SSEDEXT}.  Details and examples for "
"each command are in the following sections.  (Mnemonics) are shown in "
"parentheses."
msgstr ""

#. type: item
#: sed.texi:602 sed.texi:1156
#, no-wrap
msgid "a\\"
msgstr ""

#. type: var{#1}
#: sed.texi:603 sed.texi:614 sed.texi:663 sed.texi:1157 sed.texi:1245 sed.texi:1326
#, no-wrap
msgid "text"
msgstr ""

#. type: table
#: sed.texi:605
msgid "Append @var{text} after a line."
msgstr ""

#. type: item
#: sed.texi:606 sed.texi:1135
#, no-wrap
msgid "a @var{text}"
msgstr ""

#. type: table
#: sed.texi:608
msgid "Append @var{text} after a line (alternative syntax)."
msgstr ""

#. type: item
#: sed.texi:609 sed.texi:1564
#, no-wrap
msgid "b @var{label}"
msgstr ""

#. type: table
#: sed.texi:612
msgid ""
"Branch unconditionally to @var{label}.  The @var{label} may be omitted, in "
"which case the next cycle is started."
msgstr ""

#. type: item
#: sed.texi:613 sed.texi:1325
#, no-wrap
msgid "c\\"
msgstr ""

#. type: table
#: sed.texi:616
msgid "Replace (change) lines with @var{text}."
msgstr ""

#. type: item
#: sed.texi:617 sed.texi:1306
#, no-wrap
msgid "c @var{text}"
msgstr ""

#. type: table
#: sed.texi:619
msgid "Replace (change) lines with @var{text} (alternative syntax)."
msgstr ""

#. type: item
#: sed.texi:620 sed.texi:1009
#, no-wrap
msgid "d"
msgstr ""

#. type: table
#: sed.texi:623 sed.texi:1014
msgid "Delete the pattern space; immediately start next cycle."
msgstr ""

#. type: item
#: sed.texi:624 sed.texi:1478 sed.texi:3039
#, no-wrap
msgid "D"
msgstr ""

#. type: table
#: sed.texi:628
msgid ""
"If pattern space contains newlines, delete text in the pattern space up to "
"the first newline, and restart cycle with the resultant pattern space, "
"without reading a new line of input."
msgstr ""

#. type: table
#: sed.texi:632
msgid ""
"If pattern space contains no newline, start a normal new cycle as if the "
"@code{d} command was issued."
msgstr ""

#. type: item
#: sed.texi:633 sed.texi:917
#, no-wrap
msgid "e"
msgstr ""

#. type: table
#: sed.texi:637
msgid ""
"Executes the command that is found in pattern space and replaces the pattern "
"space with the output; a trailing newline is suppressed."
msgstr ""

#. type: item
#: sed.texi:638
#, no-wrap
msgid "e @var{command}"
msgstr ""

#. type: table
#: sed.texi:642
msgid ""
"Executes @var{command} and sends its output to the output stream.  The "
"command can run across multiple lines, all but the last ending with a "
"back-slash."
msgstr ""

#. type: item
#: sed.texi:643 sed.texi:1615
#, no-wrap
msgid "F"
msgstr ""

#. type: table
#: sed.texi:646
msgid ""
"(filename) Print the file name of the current input file (with a trailing "
"newline)."
msgstr ""

#. type: item
#: sed.texi:647 sed.texi:869 sed.texi:1522
#, no-wrap
msgid "g"
msgstr ""

#. type: table
#: sed.texi:649 sed.texi:1528
msgid ""
"Replace the contents of the pattern space with the contents of the hold "
"space."
msgstr ""

#. type: item
#: sed.texi:650 sed.texi:1529 sed.texi:3043
#, no-wrap
msgid "G"
msgstr ""

#. type: table
#: sed.texi:653 sed.texi:1535
msgid ""
"Append a newline to the contents of the pattern space, and then append the "
"contents of the hold space to that of the pattern space."
msgstr ""

#. type: item
#: sed.texi:654 sed.texi:1508
#, no-wrap
msgid "h"
msgstr ""

#. type: table
#: sed.texi:657
msgid ""
"(hold) Replace the contents of the hold space with the contents of the "
"pattern space."
msgstr ""

#. type: item
#: sed.texi:658 sed.texi:1515 sed.texi:3047
#, no-wrap
msgid "H"
msgstr ""

#. type: table
#: sed.texi:661 sed.texi:1521
msgid ""
"Append a newline to the contents of the hold space, and then append the "
"contents of the pattern space to that of the hold space."
msgstr ""

#. type: item
#: sed.texi:662 sed.texi:1244
#, no-wrap
msgid "i\\"
msgstr ""

#. type: table
#: sed.texi:665
msgid "insert @var{text} before a line."
msgstr ""

#. type: item
#: sed.texi:666 sed.texi:1224
#, no-wrap
msgid "i @var{text}"
msgstr ""

#. type: table
#: sed.texi:668
msgid "insert @var{text} before a line (alternative syntax)."
msgstr ""

#. type: item
#: sed.texi:669
#, no-wrap
msgid "l"
msgstr ""

#. type: table
#: sed.texi:671
msgid "Print the pattern space in an unambiguous form."
msgstr ""

#. type: item
#: sed.texi:672 sed.texi:1035
#, no-wrap
msgid "n"
msgstr ""

#. type: table
#: sed.texi:677
msgid ""
"(next) If auto-print is not disabled, print the pattern space, then, "
"regardless, replace the pattern space with the next line of input.  If there "
"is no more input then @command{sed} exits without processing any more "
"commands."
msgstr ""

#. type: item
#: sed.texi:678 sed.texi:1486 sed.texi:3051
#, no-wrap
msgid "N"
msgstr ""

#. type: table
#: sed.texi:683 sed.texi:1494
msgid ""
"Add a newline to the pattern space, then append the next line of input to "
"the pattern space.  If there is no more input then @command{sed} exits "
"without processing any more commands."
msgstr ""

#. type: item
#: sed.texi:684 sed.texi:891 sed.texi:1022
#, no-wrap
msgid "p"
msgstr ""

#. type: table
#: sed.texi:687
msgid "Print the pattern space."
msgstr ""

#. type: item
#: sed.texi:688 sed.texi:1503 sed.texi:3054
#, no-wrap
msgid "P"
msgstr ""

#. type: table
#: sed.texi:690
msgid "Print the pattern space, up to the first <newline>."
msgstr ""

#. type: item
#: sed.texi:691
#, no-wrap
msgid "q@var{[exit-code]}"
msgstr ""

#. type: table
#: sed.texi:693
msgid "(quit) Exit @command{sed} without processing any more commands or input."
msgstr ""

#. type: item
#: sed.texi:694
#, no-wrap
msgid "Q@var{[exit-code]}"
msgstr ""

#. type: table
#: sed.texi:699
msgid ""
"(quit) This command is the same as @code{q}, but will not print the contents "
"of pattern space.  Like @code{q}, it provides the ability to return an exit "
"code to the caller."
msgstr ""

#. type: item
#: sed.texi:700
#, no-wrap
msgid "r filename"
msgstr ""

#. type: table
#: sed.texi:702 sed.texi:1433
msgid "Reads text file a file. Example:"
msgstr ""

#. type: item
#: sed.texi:703
#, no-wrap
msgid "R filename"
msgstr ""

#. type: table
#: sed.texi:708
msgid ""
"Queue a line of @var{filename} to be read and inserted into the output "
"stream at the end of the current cycle, or when the next input line is read."
msgstr ""

#. type: item
#: sed.texi:709
#, no-wrap
msgid "s@var{/regexp/replacement/[flags]}"
msgstr ""

#. type: table
#: sed.texi:713
msgid ""
"(substitute) Match the regular-expression against the content of the pattern "
"space.  If found, replace matched string with @var{replacement}."
msgstr ""

#. type: item
#: sed.texi:714 sed.texi:1571
#, no-wrap
msgid "t @var{label}"
msgstr ""

#. type: table
#: sed.texi:719
msgid ""
"(test) Branch to @var{label} only if there has been a successful "
"@code{s}ubstitution since the last input line was read or conditional branch "
"was taken.  The @var{label} may be omitted, in which case the next cycle is "
"started."
msgstr ""

#. type: item
#: sed.texi:720 sed.texi:1663
#, no-wrap
msgid "T @var{label}"
msgstr ""

#. type: table
#: sed.texi:725
msgid ""
"(test) Branch to @var{label} only if there have been no successful "
"@code{s}ubstitutions since the last input line was read or conditional "
"branch was taken. The @var{label} may be omitted, in which case the next "
"cycle is started."
msgstr ""

#. type: item
#: sed.texi:726
#, no-wrap
msgid "v @var{[version]}"
msgstr ""

#. type: table
#: sed.texi:730
msgid ""
"(version) This command does nothing, but makes @command{sed} fail if "
"@value{SSED} extensions are not supported, or if the requested version is "
"not available."
msgstr ""

#. type: item
#: sed.texi:731
#, no-wrap
msgid "w filename"
msgstr ""

#. type: table
#: sed.texi:733
msgid "Write the pattern space to @var{filename}."
msgstr ""

#. type: item
#: sed.texi:734
#, no-wrap
msgid "W filename"
msgstr ""

#. type: table
#: sed.texi:737
msgid ""
"Write to the given filename the portion of the pattern space up to the first "
"newline"
msgstr ""

#. type: item
#: sed.texi:738 sed.texi:1536
#, no-wrap
msgid "x"
msgstr ""

#. type: table
#: sed.texi:740 sed.texi:1541
msgid "Exchange the contents of the hold and pattern spaces."
msgstr ""

#. type: item
#: sed.texi:742
#, no-wrap
msgid "y/src/dst/"
msgstr ""

#. type: table
#: sed.texi:746 sed.texi:1113
msgid ""
"Transliterate any characters in the pattern space which match any of the "
"@var{source-chars} with the corresponding character in @var{dest-chars}."
msgstr ""

#. type: item
#: sed.texi:748 sed.texi:1695
#, no-wrap
msgid "z"
msgstr ""

#. type: table
#: sed.texi:750
msgid "(zap) This command empties the content of pattern space."
msgstr ""

#. type: item
#: sed.texi:751 sed.texi:964
#, no-wrap
msgid "#"
msgstr ""

#. type: table
#: sed.texi:753
msgid "A comment, until the next newline."
msgstr ""

#. type: item
#: sed.texi:755
#, no-wrap
msgid "@{ @var{cmd ; cmd ...} @}"
msgstr ""

#. type: table
#: sed.texi:758
msgid "Group several commands together."
msgstr ""

#. type: item
#: sed.texi:759 sed.texi:1385
#, no-wrap
msgid "="
msgstr ""

#. type: table
#: sed.texi:761
msgid "Print the current input line number (with a trailing newline)."
msgstr ""

#. type: item
#: sed.texi:762 sed.texi:1556
#, no-wrap
msgid ": @var{label}"
msgstr ""

#. type: table
#: sed.texi:765
msgid ""
"Specify the location of @var{label} for branch commands (@code{b}, @code{t}, "
"@code{T})."
msgstr ""

#. type: section
#: sed.texi:770
#, no-wrap
msgid "The @code{s} Command"
msgstr ""

#. type: Plain text
#: sed.texi:776
msgid ""
"The @code{s} command (as in substitute) is probably the most important in "
"@command{sed} and has a lot of different options.  The syntax of the "
"@code{s} command is @samp{s/@var{regexp}/@var{replacement}/@var{flags}}."
msgstr ""

#. type: Plain text
#: sed.texi:781
msgid ""
"Its basic concept is simple: the @code{s} command attempts to match the "
"pattern space against the supplied regular expression @var{regexp}; if the "
"match is successful, then that portion of the pattern space which was "
"matched is replaced with @var{replacement}."
msgstr ""

#. type: Plain text
#: sed.texi:784
msgid ""
"For details about @var{regexp} syntax @pxref{Regexp Addresses,,Regular "
"Expression Addresses}."
msgstr ""

#. type: cindex
#: sed.texi:785
#, no-wrap
msgid "Backreferences, in regular expressions"
msgstr ""

#. type: cindex
#: sed.texi:786
#, no-wrap
msgid "Parenthesized substrings"
msgstr ""

#. type: Plain text
#: sed.texi:794
msgid ""
"The @var{replacement} can contain @code{\\@var{n}} (@var{n} being a number "
"from 1 to 9, inclusive) references, which refer to the portion of the match "
"which is contained between the @var{n}th @code{\\(} and its matching "
"@code{\\)}.  Also, the @var{replacement} can contain unescaped @code{&} "
"characters which reference the whole matched portion of the pattern space."
msgstr ""

#. type: Plain text
#: sed.texi:803
msgid ""
"The @code{/} characters may be uniformly replaced by any other single "
"character within any given @code{s} command.  The @code{/} character (or "
"whatever other character is used in its stead)  can appear in the "
"@var{regexp} or @var{replacement} only if it is preceded by a @code{\\} "
"character."
msgstr ""

#. type: cindex
#: sed.texi:806
#, no-wrap
msgid "@value{SSEDEXT}, case modifiers in @code{s} commands"
msgstr ""

#. type: Plain text
#: sed.texi:811
msgid ""
"Finally, as a @value{SSED} extension, you can include a special sequence "
"made of a backslash and one of the letters @code{L}, @code{l}, @code{U}, "
"@code{u}, or @code{E}.  The meaning is as follows:"
msgstr ""

#. type: item
#: sed.texi:813
#, no-wrap
msgid "\\L"
msgstr ""

#. type: table
#: sed.texi:816
msgid "Turn the replacement to lowercase until a @code{\\U} or @code{\\E} is found,"
msgstr ""

#. type: item
#: sed.texi:817
#, no-wrap
msgid "\\l"
msgstr ""

#. type: table
#: sed.texi:820
msgid "Turn the next character to lowercase,"
msgstr ""

#. type: item
#: sed.texi:821
#, no-wrap
msgid "\\U"
msgstr ""

#. type: table
#: sed.texi:824
msgid "Turn the replacement to uppercase until a @code{\\L} or @code{\\E} is found,"
msgstr ""

#. type: item
#: sed.texi:825
#, no-wrap
msgid "\\u"
msgstr ""

#. type: table
#: sed.texi:828
msgid "Turn the next character to uppercase,"
msgstr ""

#. type: item
#: sed.texi:829
#, no-wrap
msgid "\\E"
msgstr ""

#. type: table
#: sed.texi:831
msgid "Stop case conversion started by @code{\\L} or @code{\\U}."
msgstr ""

#. type: Plain text
#: sed.texi:837
msgid ""
"When the @code{g} flag is being used, case conversion does not propagate "
"from one occurrence of the regular expression to another.  For example, when "
"the following command is executed with @samp{a-b-} in pattern space:"
msgstr ""

#. type: example
#: sed.texi:839
#, no-wrap
msgid "s/\\(b\\?\\)-/x\\u\\1/g\n"
msgstr ""

#. type: Plain text
#: sed.texi:846
msgid ""
"the output is @samp{axxB}.  When replacing the first @samp{-}, the "
"@samp{\\u} sequence only affects the empty replacement of @samp{\\1}.  It "
"does not affect the @code{x} character that is added to pattern space when "
"replacing @code{b-} with @code{xB}."
msgstr ""

#. type: Plain text
#: sed.texi:850
msgid ""
"On the other hand, @code{\\l} and @code{\\u} do affect the remainder of the "
"replacement text if they are followed by an empty substitution.  With "
"@samp{a-b-} in pattern space, the following command:"
msgstr ""

#. type: example
#: sed.texi:852
#, no-wrap
msgid "s/\\(b\\?\\)-/\\u\\1x/g\n"
msgstr ""

#. type: Plain text
#: sed.texi:858
msgid ""
"will replace @samp{-} with @samp{X} (uppercase) and @samp{b-} with "
"@samp{Bx}.  If this behavior is undesirable, you can prevent it by adding a "
"@samp{\\E} sequence---after @samp{\\1} in this case."
msgstr ""

#. type: Plain text
#: sed.texi:862
msgid ""
"To include a literal @code{\\}, @code{&}, or newline in the final "
"replacement, be sure to precede the desired @code{\\}, @code{&}, or newline "
"in the @var{replacement} with a @code{\\}."
msgstr ""

#. type: findex
#: sed.texi:863
#, no-wrap
msgid "s command, option flags"
msgstr ""

#. type: cindex
#: sed.texi:864
#, no-wrap
msgid "Substitution of text, options"
msgstr ""

#. type: Plain text
#: sed.texi:867
msgid ""
"The @code{s} command can be followed by zero or more of the following "
"@var{flags}:"
msgstr ""

#. type: cindex
#: sed.texi:870
#, no-wrap
msgid "Global substitution"
msgstr ""

#. type: cindex
#: sed.texi:871
#, no-wrap
msgid "Replacing all text matching regexp in a line"
msgstr ""

#. type: table
#: sed.texi:874
msgid ""
"Apply the replacement to @emph{all} matches to the @var{regexp}, not just "
"the first."
msgstr ""

#. type: var{#1}
#: sed.texi:875 sed.texi:1826
#, no-wrap
msgid "number"
msgstr ""

#. type: cindex
#: sed.texi:876
#, no-wrap
msgid "Replacing only @var{n}th match of regexp in a line"
msgstr ""

#. type: table
#: sed.texi:878
msgid "Only replace the @var{number}th match of the @var{regexp}."
msgstr ""

#. type: cindex
#: sed.texi:879
#, no-wrap
msgid "@acronym{GNU} extensions, @code{g} and @var{number} modifier"
msgstr ""

#. type: table
#: sed.texi:881
msgid "interaction in @code{s} command"
msgstr ""

#. type: cindex
#: sed.texi:881
#, no-wrap
msgid "Mixing @code{g} and @var{number} modifiers in the @code{s} command"
msgstr ""

#. type: table
#: sed.texi:890
msgid ""
"Note: the @sc{posix} standard does not specify what should happen when you "
"mix the @code{g} and @var{number} modifiers, and currently there is no "
"widely agreed upon meaning across @command{sed} implementations.  For "
"@value{SSED}, the interaction is defined to be: ignore matches before the "
"@var{number}th, and then match and replace all matches from the "
"@var{number}th on."
msgstr ""

#. type: cindex
#: sed.texi:892
#, no-wrap
msgid "Text, printing after substitution"
msgstr ""

#. type: table
#: sed.texi:894
msgid "If the substitution was made, then print the new pattern space."
msgstr ""

#. type: table
#: sed.texi:905
msgid ""
"Note: when both the @code{p} and @code{e} options are specified, the "
"relative ordering of the two produces very different results.  In general, "
"@code{ep} (evaluate then print) is what you want, but operating the other "
"way round can be useful for debugging.  For this reason, the current version "
"of @value{SSED} interprets specially the presence of @code{p} options both "
"before and after @code{e}, printing the pattern space before and after "
"evaluation, while in general flags for the @code{s} command show their "
"effect just once.  This behavior, although documented, might change in "
"future versions."
msgstr ""

#. type: item
#: sed.texi:906
#, no-wrap
msgid "w @var{file-name}"
msgstr ""

#. type: cindex
#: sed.texi:907
#, no-wrap
msgid "Text, writing to a file after substitution"
msgstr ""

#. type: cindex
#: sed.texi:908 sed.texi:1464
#, no-wrap
msgid "@value{SSEDEXT}, @file{/dev/stdout} file"
msgstr ""

#. type: cindex
#: sed.texi:909 sed.texi:1465
#, no-wrap
msgid "@value{SSEDEXT}, @file{/dev/stderr} file"
msgstr ""

#. type: table
#: sed.texi:916
msgid ""
"If the substitution was made, then write out the result to the named file.  "
"As a @value{SSED} extension, two special values of @var{file-name} are "
"supported: @file{/dev/stderr}, which writes the result to the standard "
"error, and @file{/dev/stdout}, which writes to the standard "
"output.@footnote{This is equivalent to @code{p} unless the @option{-i} "
"option is being used.}"
msgstr ""

#. type: cindex
#: sed.texi:918
#, no-wrap
msgid "Evaluate Bourne-shell commands, after substitution"
msgstr ""

#. type: cindex
#: sed.texi:919 sed.texi:1594
#, no-wrap
msgid "Subprocesses"
msgstr ""

#. type: cindex
#: sed.texi:920 sed.texi:1595
#, no-wrap
msgid "@value{SSEDEXT}, evaluating Bourne-shell commands"
msgstr ""

#. type: cindex
#: sed.texi:921 sed.texi:1596
#, no-wrap
msgid "@value{SSEDEXT}, subprocesses"
msgstr ""

#. type: table
#: sed.texi:928
msgid ""
"This command allows one to pipe input from a shell command into pattern "
"space.  If a substitution was made, the command that is found in pattern "
"space is executed and pattern space is replaced with its output.  A trailing "
"newline is suppressed; results are undefined if the command to be executed "
"contains a @sc{nul} character.  This is a @value{SSED} extension."
msgstr ""

#. type: item
#: sed.texi:929
#, no-wrap
msgid "I"
msgstr ""

#. type: itemx
#: sed.texi:930
#, no-wrap
msgid "i"
msgstr ""

#. type: cindex
#: sed.texi:931 sed.texi:1937
#, no-wrap
msgid "@acronym{GNU} extensions, @code{I} modifier"
msgstr ""

#. type: cindex
#: sed.texi:932
#, no-wrap
msgid "Case-insensitive matching"
msgstr ""

#. type: table
#: sed.texi:936
msgid ""
"The @code{I} modifier to regular-expression matching is a @acronym{GNU} "
"extension which makes @command{sed} match @var{regexp} in a case-insensitive "
"manner."
msgstr ""

#. type: item
#: sed.texi:937
#, no-wrap
msgid "M"
msgstr ""

#. type: itemx
#: sed.texi:938
#, no-wrap
msgid "m"
msgstr ""

#. type: cindex
#: sed.texi:939 sed.texi:1973
#, no-wrap
msgid "@value{SSEDEXT}, @code{M} modifier"
msgstr ""

#. type: table
#: sed.texi:946 sed.texi:1980
msgid ""
"The @code{M} modifier to regular-expression matching is a @value{SSED} "
"extension which directs @value{SSED} to match the regular expression in "
"@cite{multi-line} mode.  The modifier causes @code{^} and @code{$} to match "
"respectively (in addition to the normal behavior) the empty string after a "
"newline, and the empty string before a newline.  There are special character "
"sequences"
msgstr ""

#. type: ifclear
#: sed.texi:948 sed.texi:1982
msgid "(@code{\\`} and @code{\\'})"
msgstr ""

#. type: table
#: sed.texi:953 sed.texi:1987
msgid ""
"which always match the beginning or the end of the buffer.  In addition, the "
"period character does not match a new-line character in multi-line mode."
msgstr ""

#. type: section
#: sed.texi:958
#, no-wrap
msgid "Often-Used Commands"
msgstr ""

#. type: Plain text
#: sed.texi:962
msgid ""
"If you use @command{sed} at all, you will quite likely want to know these "
"commands."
msgstr ""

#. type: table
#: sed.texi:966 sed.texi:1558
msgid "[No addresses allowed.]"
msgstr ""

#. type: findex
#: sed.texi:967
#, no-wrap
msgid "# (comments)"
msgstr ""

#. type: cindex
#: sed.texi:968
#, no-wrap
msgid "Comments, in scripts"
msgstr ""

#. type: table
#: sed.texi:971
msgid ""
"The @code{#} character begins a comment; the comment continues until the "
"next newline."
msgstr ""

#. type: cindex
#: sed.texi:972
#, no-wrap
msgid "Portability, comments"
msgstr ""

#. type: table
#: sed.texi:977
msgid ""
"If you are concerned about portability, be aware that some implementations "
"of @command{sed} (which are not @sc{posix} conforming) may only support a "
"single one-line comment, and then only when the very first character of the "
"script is a @code{#}."
msgstr ""

#. type: findex
#: sed.texi:978
#, no-wrap
msgid "-n, forcing from within a script"
msgstr ""

#. type: cindex
#: sed.texi:979
#, no-wrap
msgid "Caveat --- #n on first line"
msgstr ""

#. type: table
#: sed.texi:987
msgid ""
"Warning: if the first two characters of the @command{sed} script are "
"@code{#n}, then the @option{-n} (no-autoprint) option is forced.  If you "
"want to put a comment in the first line of your script and that comment "
"begins with the letter @samp{n} and you do not want this behavior, then be "
"sure to either use a capital @samp{N}, or place at least one space before "
"the @samp{n}."
msgstr ""

#. type: item
#: sed.texi:988
#, no-wrap
msgid "q [@var{exit-code}]"
msgstr ""

#. type: findex
#: sed.texi:989
#, no-wrap
msgid "q (quit) command"
msgstr ""

#. type: cindex
#: sed.texi:990 sed.texi:1627
#, no-wrap
msgid "@value{SSEDEXT}, returning an exit code"
msgstr ""

#. type: cindex
#: sed.texi:991 sed.texi:1628
#, no-wrap
msgid "Quitting"
msgstr ""

#. type: table
#: sed.texi:993
msgid "Exit @command{sed} without processing any more commands or input."
msgstr ""

#. type: table
#: sed.texi:995
msgid "Example: stop after printing the second line:"
msgstr ""

#. type: example
#: sed.texi:999
#, no-wrap
msgid ""
"$ seq 3 | sed 2q\n"
"1\n"
"2\n"
msgstr ""

#. type: table
#: sed.texi:1005
msgid ""
"This command only accepts a single address.  Note that the current pattern "
"space is printed if auto-print is not disabled with the @option{-n} "
"options.  The ability to return an exit code from the @command{sed} script "
"is a @value{SSED} extension."
msgstr ""

#. type: table
#: sed.texi:1008
msgid ""
"See also the @value{SSED} extension @code{Q} command which quits silently "
"without printing the current pattern space."
msgstr ""

#. type: findex
#: sed.texi:1010
#, no-wrap
msgid "d (delete) command"
msgstr ""

#. type: cindex
#: sed.texi:1011
#, no-wrap
msgid "Text, deleting"
msgstr ""

#. type: table
#: sed.texi:1016
msgid "Example: delete the second input line:"
msgstr ""

#. type: example
#: sed.texi:1020
#, no-wrap
msgid ""
"$ seq 3 | sed 2d\n"
"1\n"
"3\n"
msgstr ""

#. type: findex
#: sed.texi:1023
#, no-wrap
msgid "p (print) command"
msgstr ""

#. type: cindex
#: sed.texi:1024
#, no-wrap
msgid "Text, printing"
msgstr ""

#. type: table
#: sed.texi:1028
msgid ""
"Print out the pattern space (to the standard output).  This command is "
"usually only used in conjunction with the @option{-n} command-line option."
msgstr ""

#. type: table
#: sed.texi:1030
msgid "Example: print only the second input line:"
msgstr ""

#. type: example
#: sed.texi:1033
#, no-wrap
msgid ""
"$ seq 3 | sed -n 2p\n"
"2\n"
msgstr ""

#. type: findex
#: sed.texi:1036
#, no-wrap
msgid "n (next-line) command"
msgstr ""

#. type: cindex
#: sed.texi:1037
#, no-wrap
msgid "Next input line, replace pattern space with"
msgstr ""

#. type: cindex
#: sed.texi:1038
#, no-wrap
msgid "Read next input line"
msgstr ""

#. type: table
#: sed.texi:1043
msgid ""
"If auto-print is not disabled, print the pattern space, then, regardless, "
"replace the pattern space with the next line of input.  If there is no more "
"input then @command{sed} exits without processing any more commands."
msgstr ""

#. type: table
#: sed.texi:1045
msgid "This command is useful to skip lines (e.g. process every Nth line)."
msgstr ""

#. type: table
#: sed.texi:1050
msgid ""
"Example: perform substitution on every 3rd line (i.e. two @code{n} commands "
"skip two lines): @codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1058
#, no-wrap
msgid ""
"$ seq 6 | sed 'n;n;s/./x/'\n"
"1\n"
"2\n"
"x\n"
"4\n"
"5\n"
"x\n"
msgstr ""

#. type: table
#: sed.texi:1062
msgid ""
"@value{SSED} provides an extension address syntax of @var{first}~@var{step} "
"to achieve the same result:"
msgstr ""

#. type: example
#: sed.texi:1071
#, no-wrap
msgid ""
"$ seq 6 | sed '0~3s/./x/'\n"
"1\n"
"2\n"
"x\n"
"4\n"
"5\n"
"x\n"
msgstr ""

#. type: table
#: sed.texi:1075
msgid "@codequotebacktick off @codequoteundirected off"
msgstr ""

#. type: item
#: sed.texi:1077
#, no-wrap
msgid "@{ @var{commands} @}"
msgstr ""

#. type: findex
#: sed.texi:1078
#, no-wrap
msgid "@{@} command grouping"
msgstr ""

#. type: cindex
#: sed.texi:1079
#, no-wrap
msgid "Grouping commands"
msgstr ""

#. type: cindex
#: sed.texi:1080
#, no-wrap
msgid "Command groups"
msgstr ""

#. type: table
#: sed.texi:1085
msgid ""
"A group of commands may be enclosed between @code{@{} and @code{@}} "
"characters.  This is particularly useful when you want a group of commands "
"to be triggered by a single address (or address-range) match."
msgstr ""

#. type: table
#: sed.texi:1089
msgid ""
"Example: perform substitution then print the second input line: "
"@codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1092
#, no-wrap
msgid ""
"$ seq 3 | sed -n '2@{s/2/X/ ; p@}'\n"
"X\n"
msgstr ""

#. type: Plain text
#: sed.texi:1095 sed.texi:1123 sed.texi:1151 sed.texi:1177 sed.texi:1207 sed.texi:1223 sed.texi:1240 sed.texi:1265 sed.texi:1289 sed.texi:1305 sed.texi:1321 sed.texi:1347 sed.texi:1368 sed.texi:1383 sed.texi:1404 sed.texi:1445 sed.texi:1738 sed.texi:1752 sed.texi:1769 sed.texi:1787 sed.texi:3077 sed.texi:3112 sed.texi:3169 sed.texi:3234 sed.texi:3259 sed.texi:3668 sed.texi:3717 sed.texi:3781 sed.texi:3797
msgid "@codequoteundirected off @codequotebacktick off"
msgstr ""

#. type: section
#: sed.texi:1100
#, no-wrap
msgid "Less Frequently-Used Commands"
msgstr ""

#. type: Plain text
#: sed.texi:1105
msgid ""
"Though perhaps less frequently used than those in the previous section, some "
"very small yet useful @command{sed} scripts can be built with these "
"commands."
msgstr ""

#. type: item
#: sed.texi:1107
#, no-wrap
msgid "y/@var{source-chars}/@var{dest-chars}/"
msgstr ""

#. type: findex
#: sed.texi:1108
#, no-wrap
msgid "y (transliterate) command"
msgstr ""

#. type: cindex
#: sed.texi:1109
#, no-wrap
msgid "Transliteration"
msgstr ""

#. type: table
#: sed.texi:1117
msgid ""
"Example: transliterate @samp{a-j} into @samp{0-9}: @codequoteundirected on "
"@codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1120
#, no-wrap
msgid ""
"$ echo hello world | sed 'y/abcdefghij/0123456789/'\n"
"74llo worl3\n"
msgstr ""

#. type: table
#: sed.texi:1126
msgid ""
"(The @code{/} characters may be uniformly replaced by any other single "
"character within any given @code{y} command.)"
msgstr ""

#. type: table
#: sed.texi:1132
msgid ""
"Instances of the @code{/} (or whatever other character is used in its "
"stead), @code{\\}, or newlines can appear in the @var{source-chars} or "
"@var{dest-chars} lists, provide that each instance is escaped by a "
"@code{\\}.  The @var{source-chars} and @var{dest-chars} lists @emph{must} "
"contain the same number of characters (after de-escaping)."
msgstr ""

#. type: table
#: sed.texi:1134
msgid "See the @command{tr} command from GNU coreutils for similar functionality."
msgstr ""

#. type: table
#: sed.texi:1138
msgid ""
"Appending @var{text} after a line. This is a @acronym{GNU} extension to the "
"standard @code{a} command - see below for details."
msgstr ""

#. type: table
#: sed.texi:1142
msgid ""
"Example: Add the word @samp{hello} after the second line: "
"@codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1148
#, no-wrap
msgid ""
"$ seq 3 | sed '2a hello'\n"
"1\n"
"2\n"
"hello\n"
"3\n"
msgstr ""

#. type: table
#: sed.texi:1154
msgid ""
"Leading whitespaces after the @code{a} command are ignored.  The text to add "
"is read until the end of the line."
msgstr ""

#. type: findex
#: sed.texi:1158
#, no-wrap
msgid "a (append text lines) command"
msgstr ""

#. type: cindex
#: sed.texi:1159
#, no-wrap
msgid "Appending text after a line"
msgstr ""

#. type: cindex
#: sed.texi:1160
#, no-wrap
msgid "Text, appending"
msgstr ""

#. type: table
#: sed.texi:1162
msgid "Appending @var{text} after a line."
msgstr ""

#. type: table
#: sed.texi:1167
msgid ""
"Example: Add @samp{hello} after the second line (@print{} indicates printed "
"output lines): @codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1174
#, no-wrap
msgid ""
"$ seq 3 | sed '2a\\\n"
"hello'\n"
"@print{}1\n"
"@print{}2\n"
"@print{}hello\n"
"@print{}3\n"
msgstr ""

#. type: table
#: sed.texi:1183
msgid ""
"The @code{a} command queues the lines of text which follow this command "
"(each but the last ending with a @code{\\}, which are removed from the "
"output)  to be output at the end of the current cycle, or when the next "
"input line is read."
msgstr ""

#. type: cindex
#: sed.texi:1184 sed.texi:1266 sed.texi:1405 sed.texi:1457
#, no-wrap
msgid "@value{SSEDEXT}, two addresses supported by most commands"
msgstr ""

#. type: table
#: sed.texi:1186 sed.texi:1268 sed.texi:1407
msgid "As a @acronym{GNU} extension, this command accepts two addresses."
msgstr ""

#. type: table
#: sed.texi:1189 sed.texi:1271
msgid ""
"Escape sequences in @var{text} are processed, so you should use @code{\\\\} "
"in @var{text} to print a single backslash."
msgstr ""

#. type: table
#: sed.texi:1194 sed.texi:1276
msgid ""
"The commands resume after the last line without a backslash (@code{\\}) - "
"@samp{world} in the following example: @codequoteundirected on "
"@codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1204
#, no-wrap
msgid ""
"$ seq 3 | sed '2a\\\n"
"hello\\\n"
"world\n"
"3s/./X/'\n"
"@print{}1\n"
"@print{}2\n"
"@print{}hello\n"
"@print{}world\n"
"@print{}X\n"
msgstr ""

#. type: table
#: sed.texi:1212
msgid ""
"As a @acronym{GNU} extension, the @code{a} command and @var{text} can be "
"separated into two @code{-e} parameters, enabling easier scripting: "
"@codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1218
#, no-wrap
msgid ""
"$ seq 3 | sed -e '2a\\' -e hello\n"
"1\n"
"2\n"
"hello\n"
"3\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:1220
#, no-wrap
msgid "$ sed -e '2a\\' -e \"$VAR\"\n"
msgstr ""

#. type: table
#: sed.texi:1227
msgid ""
"insert @var{text} before a line. This is a @acronym{GNU} extension to the "
"standard @code{i} command - see below for details."
msgstr ""

#. type: table
#: sed.texi:1231
msgid ""
"Example: Insert the word @samp{hello} before the second line: "
"@codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1237
#, no-wrap
msgid ""
"$ seq 3 | sed '2i hello'\n"
"1\n"
"hello\n"
"2\n"
"3\n"
msgstr ""

#. type: table
#: sed.texi:1243
msgid ""
"Leading whitespaces after the @code{i} command are ignored.  The text to add "
"is read until the end of the line."
msgstr ""

#. type: findex
#: sed.texi:1246
#, no-wrap
msgid "i (insert text lines) command"
msgstr ""

#. type: cindex
#: sed.texi:1247
#, no-wrap
msgid "Inserting text before a line"
msgstr ""

#. type: cindex
#: sed.texi:1248
#, no-wrap
msgid "Text, insertion"
msgstr ""

#. type: table
#: sed.texi:1250
msgid "Immediately output the lines of text which follow this command."
msgstr ""

#. type: table
#: sed.texi:1255
msgid ""
"Example: Insert @samp{hello} before the second line (@print{} indicates "
"printed output lines): @codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1262
#, no-wrap
msgid ""
"$ seq 3 | sed '2i\\\n"
"hello'\n"
"@print{}1\n"
"@print{}hello\n"
"@print{}2\n"
"@print{}3\n"
msgstr ""

#. type: example
#: sed.texi:1286
#, no-wrap
msgid ""
"$ seq 3 | sed '2i\\\n"
"hello\\\n"
"world\n"
"s/./X/'\n"
"@print{}X\n"
"@print{}hello\n"
"@print{}world\n"
"@print{}X\n"
"@print{}X\n"
msgstr ""

#. type: table
#: sed.texi:1294
msgid ""
"As a @acronym{GNU} extension, the @code{i} command and @var{text} can be "
"separated into two @code{-e} parameters, enabling easier scripting: "
"@codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1300
#, no-wrap
msgid ""
"$ seq 3 | sed -e '2i\\' -e hello\n"
"1\n"
"hello\n"
"2\n"
"3\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:1302
#, no-wrap
msgid "$ sed -e '2i\\' -e \"$VAR\"\n"
msgstr ""

#. type: table
#: sed.texi:1309
msgid ""
"Replaces the line(s) with @var{text}. This is a @acronym{GNU} extension to "
"the standard @code{c} command - see below for details."
msgstr ""

#. type: table
#: sed.texi:1313
msgid ""
"Example: Replace the 2nd to 9th lines with the word @samp{hello}: "
"@codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1318
#, no-wrap
msgid ""
"$ seq 10 | sed '2,9c hello'\n"
"1\n"
"hello\n"
"10\n"
msgstr ""

#. type: table
#: sed.texi:1324
msgid ""
"Leading whitespaces after the @code{c} command are ignored.  The text to add "
"is read until the end of the line."
msgstr ""

#. type: findex
#: sed.texi:1327
#, no-wrap
msgid "c (change to text lines) command"
msgstr ""

#. type: cindex
#: sed.texi:1328
#, no-wrap
msgid "Replacing selected lines with other text"
msgstr ""

#. type: table
#: sed.texi:1331
msgid ""
"Delete the lines matching the address or address-range, and output the lines "
"of text which follow this command."
msgstr ""

#. type: table
#: sed.texi:1336
msgid ""
"Example: Replace 2nd to 4th lines with the words @samp{hello} and "
"@samp{world} (@print{} indicates printed output lines): @codequoteundirected "
"on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1344
#, no-wrap
msgid ""
"$ seq 5 | sed '2,4c\\\n"
"hello\\\n"
"world'\n"
"@print{}1\n"
"@print{}hello\n"
"@print{}world\n"
"@print{}5\n"
msgstr ""

#. type: table
#: sed.texi:1349
msgid "If no addresses are given, each line is replaced."
msgstr ""

#. type: table
#: sed.texi:1355
msgid ""
"A new cycle is started after this command is done, since the pattern space "
"will have been deleted.  In the following example, the @code{c} starts a new "
"cycle and the substitution command is not performed on the replaced text:"
msgstr ""

#. type: Plain text
#: sed.texi:1358 sed.texi:1393 sed.texi:1436 sed.texi:1733 sed.texi:1747 sed.texi:1764 sed.texi:1782 sed.texi:3065 sed.texi:3107 sed.texi:3220 sed.texi:3239 sed.texi:3644 sed.texi:3705
msgid "@codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1365
#, no-wrap
msgid ""
"$ seq 3 | sed '2c\\\n"
"hello\n"
"s/./X/'\n"
"@print{}X\n"
"@print{}hello\n"
"@print{}X\n"
msgstr ""

#. type: table
#: sed.texi:1373
msgid ""
"As a @acronym{GNU} extension, the @code{c} command and @var{text} can be "
"separated into two @code{-e} parameters, enabling easier scripting: "
"@codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: example
#: sed.texi:1378
#, no-wrap
msgid ""
"$ seq 3 | sed -e '2c\\' -e hello\n"
"1\n"
"hello\n"
"3\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:1380
#, no-wrap
msgid "$ sed -e '2c\\' -e \"$VAR\"\n"
msgstr ""

#. type: findex
#: sed.texi:1386
#, no-wrap
msgid "= (print line number) command"
msgstr ""

#. type: cindex
#: sed.texi:1387
#, no-wrap
msgid "Printing line number"
msgstr ""

#. type: cindex
#: sed.texi:1388
#, no-wrap
msgid "Line number, printing"
msgstr ""

#. type: table
#: sed.texi:1390
msgid "Print out the current input line number (with a trailing newline)."
msgstr ""

#. type: example
#: sed.texi:1401
#, no-wrap
msgid ""
"$ printf '%s\\n' aaa bbb ccc | sed =\n"
"1\n"
"aaa\n"
"2\n"
"bbb\n"
"3\n"
"ccc\n"
msgstr ""

#. type: item
#: sed.texi:1411
#, no-wrap
msgid "l @var{n}"
msgstr ""

#. type: findex
#: sed.texi:1412
#, no-wrap
msgid "l (list unambiguously) command"
msgstr ""

#. type: cindex
#: sed.texi:1413
#, no-wrap
msgid "List pattern space"
msgstr ""

#. type: cindex
#: sed.texi:1414
#, no-wrap
msgid "Printing text unambiguously"
msgstr ""

#. type: cindex
#: sed.texi:1416
#, no-wrap
msgid "@value{SSEDEXT}, setting line length"
msgstr ""

#. type: table
#: sed.texi:1422
msgid ""
"Print the pattern space in an unambiguous form: non-printable characters "
"(and the @code{\\} character)  are printed in C-style escaped form; long "
"lines are split, with a trailing @code{\\} character to indicate the split; "
"the end of each line is marked with a @code{$}."
msgstr ""

#. type: table
#: sed.texi:1427
msgid ""
"@var{n} specifies the desired line-wrap length; a length of 0 (zero) means "
"to never wrap long lines.  If omitted, the default as specified on the "
"command line is used.  The @var{n} parameter is a @value{SSED} extension."
msgstr ""

#. type: item
#: sed.texi:1428
#, no-wrap
msgid "r @var{filename}"
msgstr ""

#. type: findex
#: sed.texi:1430
#, no-wrap
msgid "r (read file) command"
msgstr ""

#. type: cindex
#: sed.texi:1431 sed.texi:1649
#, no-wrap
msgid "Read text from a file"
msgstr ""

#. type: example
#: sed.texi:1442
#, no-wrap
msgid ""
"$ seq 3 | sed '2r/etc/hostname'\n"
"1\n"
"2\n"
"fencepost.gnu.org\n"
"3\n"
msgstr ""

#. type: cindex
#: sed.texi:1446 sed.texi:1652
#, no-wrap
msgid "@value{SSEDEXT}, @file{/dev/stdin} file"
msgstr ""

#. type: table
#: sed.texi:1452
msgid ""
"Queue the contents of @var{filename} to be read and inserted into the output "
"stream at the end of the current cycle, or when the next input line is "
"read.  Note that if @var{filename} cannot be read, it is treated as if it "
"were an empty file, without any error indication."
msgstr ""

#. type: table
#: sed.texi:1456
msgid ""
"As a @value{SSED} extension, the special value @file{/dev/stdin} is "
"supported for the file name, which reads the contents of the standard input."
msgstr ""

#. type: table
#: sed.texi:1460
msgid ""
"As a @acronym{GNU} extension, this command accepts two addresses. The file "
"will then be reread and inserted on each of the addressed lines."
msgstr ""

#. type: item
#: sed.texi:1461
#, no-wrap
msgid "w @var{filename}"
msgstr ""

#. type: findex
#: sed.texi:1462
#, no-wrap
msgid "w (write file) command"
msgstr ""

#. type: cindex
#: sed.texi:1463
#, no-wrap
msgid "Write to a file"
msgstr ""

#. type: table
#: sed.texi:1472
msgid ""
"Write the pattern space to @var{filename}.  As a @value{SSED} extension, two "
"special values of @var{file-name} are supported: @file{/dev/stderr}, which "
"writes the result to the standard error, and @file{/dev/stdout}, which "
"writes to the standard output.@footnote{This is equivalent to @code{p} "
"unless the @option{-i} option is being used.}"
msgstr ""

#. type: table
#: sed.texi:1477
msgid ""
"The file will be created (or truncated) before the first input line is read; "
"all @code{w} commands (including instances of the @code{w} flag on "
"successful @code{s} commands) which refer to the same @var{filename} are "
"output without closing and reopening the file."
msgstr ""

#. type: findex
#: sed.texi:1479
#, no-wrap
msgid "D (delete first line) command"
msgstr ""

#. type: cindex
#: sed.texi:1480
#, no-wrap
msgid "Delete first line from pattern space"
msgstr ""

#. type: table
#: sed.texi:1485
msgid ""
"If pattern space contains no newline, start a normal new cycle as if the "
"@code{d} command was issued.  Otherwise, delete text in the pattern space up "
"to the first newline, and restart cycle with the resultant pattern space, "
"without reading a new line of input."
msgstr ""

#. type: findex
#: sed.texi:1487
#, no-wrap
msgid "N (append Next line) command"
msgstr ""

#. type: cindex
#: sed.texi:1488
#, no-wrap
msgid "Next input line, append to pattern space"
msgstr ""

#. type: cindex
#: sed.texi:1489
#, no-wrap
msgid "Append next input line to pattern space"
msgstr ""

#. type: table
#: sed.texi:1497
msgid ""
"When @option{-z} is used, a zero byte (the ascii @samp{NUL} character) is "
"added between the lines (instead of a new line)."
msgstr ""

#. type: table
#: sed.texi:1501
msgid ""
"By default @command{sed} does not terminate if there is no 'next' input "
"line.  This is a GNU extension which can be disabled with @option{--posix}.  "
"@xref{N_command_last_line,,N command on the last line}."
msgstr ""

#. type: findex
#: sed.texi:1504
#, no-wrap
msgid "P (print first line) command"
msgstr ""

#. type: cindex
#: sed.texi:1505
#, no-wrap
msgid "Print first line from pattern space"
msgstr ""

#. type: table
#: sed.texi:1507
msgid "Print out the portion of the pattern space up to the first newline."
msgstr ""

#. type: findex
#: sed.texi:1509
#, no-wrap
msgid "h (hold) command"
msgstr ""

#. type: cindex
#: sed.texi:1510
#, no-wrap
msgid "Copy pattern space into hold space"
msgstr ""

#. type: cindex
#: sed.texi:1511
#, no-wrap
msgid "Replace hold space with copy of pattern space"
msgstr ""

#. type: cindex
#: sed.texi:1512
#, no-wrap
msgid "Hold space, copying pattern space into"
msgstr ""

#. type: table
#: sed.texi:1514
msgid ""
"Replace the contents of the hold space with the contents of the pattern "
"space."
msgstr ""

#. type: findex
#: sed.texi:1516
#, no-wrap
msgid "H (append Hold) command"
msgstr ""

#. type: cindex
#: sed.texi:1517
#, no-wrap
msgid "Append pattern space to hold space"
msgstr ""

#. type: cindex
#: sed.texi:1518
#, no-wrap
msgid "Hold space, appending from pattern space"
msgstr ""

#. type: findex
#: sed.texi:1523
#, no-wrap
msgid "g (get) command"
msgstr ""

#. type: cindex
#: sed.texi:1524
#, no-wrap
msgid "Copy hold space into pattern space"
msgstr ""

#. type: cindex
#: sed.texi:1525
#, no-wrap
msgid "Replace pattern space with copy of hold space"
msgstr ""

#. type: cindex
#: sed.texi:1526
#, no-wrap
msgid "Hold space, copy into pattern space"
msgstr ""

#. type: findex
#: sed.texi:1530
#, no-wrap
msgid "G (appending Get) command"
msgstr ""

#. type: cindex
#: sed.texi:1531
#, no-wrap
msgid "Append hold space to pattern space"
msgstr ""

#. type: cindex
#: sed.texi:1532
#, no-wrap
msgid "Hold space, appending to pattern space"
msgstr ""

#. type: findex
#: sed.texi:1537
#, no-wrap
msgid "x (eXchange) command"
msgstr ""

#. type: cindex
#: sed.texi:1538
#, no-wrap
msgid "Exchange hold space with pattern space"
msgstr ""

#. type: cindex
#: sed.texi:1539
#, no-wrap
msgid "Hold space, exchange with pattern space"
msgstr ""

#. type: Plain text
#: sed.texi:1553
msgid ""
"In most cases, use of these commands indicates that you are probably better "
"off programming in something like @command{awk} or Perl.  But occasionally "
"one is committed to sticking with @command{sed}, and these commands can "
"enable one to write quite convoluted scripts."
msgstr ""

#. type: cindex
#: sed.texi:1554
#, no-wrap
msgid "Flow of control in scripts"
msgstr ""

#. type: findex
#: sed.texi:1559
#, no-wrap
msgid ": (label) command"
msgstr ""

#. type: cindex
#: sed.texi:1560
#, no-wrap
msgid "Labels, in scripts"
msgstr ""

#. type: table
#: sed.texi:1563
msgid ""
"Specify the location of @var{label} for branch commands.  In all other "
"respects, a no-op."
msgstr ""

#. type: findex
#: sed.texi:1565
#, no-wrap
msgid "b (branch) command"
msgstr ""

#. type: cindex
#: sed.texi:1566
#, no-wrap
msgid "Branch to a label, unconditionally"
msgstr ""

#. type: cindex
#: sed.texi:1567
#, no-wrap
msgid "Goto, in scripts"
msgstr ""

#. type: table
#: sed.texi:1570
msgid ""
"Unconditionally branch to @var{label}.  The @var{label} may be omitted, in "
"which case the next cycle is started."
msgstr ""

#. type: findex
#: sed.texi:1572
#, no-wrap
msgid "t (test and branch if successful) command"
msgstr ""

#. type: cindex
#: sed.texi:1573
#, no-wrap
msgid "Branch to a label, if @code{s///} succeeded"
msgstr ""

#. type: cindex
#: sed.texi:1574 sed.texi:1667
#, no-wrap
msgid "Conditional branch"
msgstr ""

#. type: table
#: sed.texi:1578
msgid ""
"Branch to @var{label} only if there has been a successful "
"@code{s}ubstitution since the last input line was read or conditional branch "
"was taken.  The @var{label} may be omitted, in which case the next cycle is "
"started."
msgstr ""

#. type: section
#: sed.texi:1582
#, no-wrap
msgid "Commands Specific to @value{SSED}"
msgstr ""

#. type: Plain text
#: sed.texi:1589
msgid ""
"These commands are specific to @value{SSED}, so you must use them with care "
"and only when you are sure that hindering portability is not evil.  They "
"allow you to check for @value{SSED} extensions or to do tasks that are "
"required quite often, yet are unsupported by standard @command{sed}s."
msgstr ""

#. type: item
#: sed.texi:1591
#, no-wrap
msgid "e [@var{command}]"
msgstr ""

#. type: findex
#: sed.texi:1592
#, no-wrap
msgid "e (evaluate) command"
msgstr ""

#. type: cindex
#: sed.texi:1593
#, no-wrap
msgid "Evaluate Bourne-shell commands"
msgstr ""

#. type: table
#: sed.texi:1602
msgid ""
"This command allows one to pipe input from a shell command into pattern "
"space.  Without parameters, the @code{e} command executes the command that "
"is found in pattern space and replaces the pattern space with the output; a "
"trailing newline is suppressed."
msgstr ""

#. type: table
#: sed.texi:1607
msgid ""
"If a parameter is specified, instead, the @code{e} command interprets it as "
"a command and sends its output to the output stream.  The command can run "
"across multiple lines, all but the last ending with a back-slash."
msgstr ""

#. type: table
#: sed.texi:1610
msgid ""
"In both cases, the results are undefined if the command to be executed "
"contains a @sc{nul} character."
msgstr ""

#. type: table
#: sed.texi:1614
msgid ""
"Note that, unlike the @code{r} command, the output of the command will be "
"printed immediately; the @code{r} command instead delays the output to the "
"end of the current cycle."
msgstr ""

#. type: findex
#: sed.texi:1616
#, no-wrap
msgid "F (File name) command"
msgstr ""

#. type: cindex
#: sed.texi:1617
#, no-wrap
msgid "Printing file name"
msgstr ""

#. type: cindex
#: sed.texi:1618
#, no-wrap
msgid "File name, printing"
msgstr ""

#. type: table
#: sed.texi:1621
msgid "Print out the file name of the current input file (with a trailing newline)."
msgstr ""

#. type: item
#: sed.texi:1622
#, no-wrap
msgid "Q [@var{exit-code}]"
msgstr ""

#. type: table
#: sed.texi:1624
msgid "This command only accepts a single address."
msgstr ""

#. type: findex
#: sed.texi:1625
#, no-wrap
msgid "Q (silent Quit) command"
msgstr ""

#. type: cindex
#: sed.texi:1626
#, no-wrap
msgid "@value{SSEDEXT}, quitting silently"
msgstr ""

#. type: table
#: sed.texi:1632
msgid ""
"This command is the same as @code{q}, but will not print the contents of "
"pattern space.  Like @code{q}, it provides the ability to return an exit "
"code to the caller."
msgstr ""

#. type: table
#: sed.texi:1638
msgid ""
"This command can be useful because the only alternative ways to accomplish "
"this apparently trivial function are to use the @option{-n} option (which "
"can unnecessarily complicate your script) or resorting to the following "
"snippet, which wastes time by reading the whole file without any visible "
"effect:"
msgstr ""

#. type: example
#: sed.texi:1645
#, no-wrap
msgid ""
":eat\n"
"$d       @i{@r{Quit silently on the last line}}\n"
"N        @i{@r{Read another line, silently}}\n"
"g        @i{@r{Overwrite pattern space each time to save memory}}\n"
"b eat\n"
msgstr ""

#. type: item
#: sed.texi:1647
#, no-wrap
msgid "R @var{filename}"
msgstr ""

#. type: findex
#: sed.texi:1648
#, no-wrap
msgid "R (read line) command"
msgstr ""

#. type: cindex
#: sed.texi:1650
#, no-wrap
msgid "@value{SSEDEXT}, reading a file a line at a time"
msgstr ""

#. type: cindex
#: sed.texi:1651
#, no-wrap
msgid "@value{SSEDEXT}, @code{R} command"
msgstr ""

#. type: table
#: sed.texi:1658
msgid ""
"Queue a line of @var{filename} to be read and inserted into the output "
"stream at the end of the current cycle, or when the next input line is "
"read.  Note that if @var{filename} cannot be read, or if its end is reached, "
"no line is appended, without any error indication."
msgstr ""

#. type: table
#: sed.texi:1662
msgid ""
"As with the @code{r} command, the special value @file{/dev/stdin} is "
"supported for the file name, which reads a line from the standard input."
msgstr ""

#. type: findex
#: sed.texi:1664
#, no-wrap
msgid "T (test and branch if failed) command"
msgstr ""

#. type: cindex
#: sed.texi:1665
#, no-wrap
msgid "@value{SSEDEXT}, branch if @code{s///} failed"
msgstr ""

#. type: cindex
#: sed.texi:1666
#, no-wrap
msgid "Branch to a label, if @code{s///} failed"
msgstr ""

#. type: table
#: sed.texi:1672
msgid ""
"Branch to @var{label} only if there have been no successful "
"@code{s}ubstitutions since the last input line was read or conditional "
"branch was taken. The @var{label} may be omitted, in which case the next "
"cycle is started."
msgstr ""

#. type: item
#: sed.texi:1673
#, no-wrap
msgid "v @var{version}"
msgstr ""

#. type: findex
#: sed.texi:1674
#, no-wrap
msgid "v (version) command"
msgstr ""

#. type: cindex
#: sed.texi:1675
#, no-wrap
msgid "@value{SSEDEXT}, checking for their presence"
msgstr ""

#. type: cindex
#: sed.texi:1676
#, no-wrap
msgid "Requiring @value{SSED}"
msgstr ""

#. type: table
#: sed.texi:1683
msgid ""
"This command does nothing, but makes @command{sed} fail if @value{SSED} "
"extensions are not supported, simply because other versions of @command{sed} "
"do not implement it.  In addition, you can specify the version of "
"@command{sed} that your script requires, such as @code{4.0.5}.  The default "
"is @code{4.0} because that is the first version that implemented this "
"command."
msgstr ""

#. type: table
#: sed.texi:1686
msgid ""
"This command enables all @value{SSEDEXT} even if @env{POSIXLY_CORRECT} is "
"set in the environment."
msgstr ""

#. type: item
#: sed.texi:1687
#, no-wrap
msgid "W @var{filename}"
msgstr ""

#. type: findex
#: sed.texi:1688
#, no-wrap
msgid "W (write first line) command"
msgstr ""

#. type: cindex
#: sed.texi:1689
#, no-wrap
msgid "Write first line to a file"
msgstr ""

#. type: cindex
#: sed.texi:1690
#, no-wrap
msgid "@value{SSEDEXT}, writing first line to a file"
msgstr ""

#. type: table
#: sed.texi:1694
msgid ""
"Write to the given filename the portion of the pattern space up to the first "
"newline.  Everything said under the @code{w} command about file handling "
"holds here too."
msgstr ""

#. type: findex
#: sed.texi:1696
#, no-wrap
msgid "z (Zap) command"
msgstr ""

#. type: cindex
#: sed.texi:1697 sed.texi:4707
#, no-wrap
msgid "@value{SSEDEXT}, emptying pattern space"
msgstr ""

#. type: cindex
#: sed.texi:1698 sed.texi:4708
#, no-wrap
msgid "Emptying pattern space"
msgstr ""

#. type: table
#: sed.texi:1706
msgid ""
"This command empties the content of pattern space.  It is usually the same "
"as @samp{s/.*//}, but is more efficient and works in the presence of invalid "
"multibyte sequences in the input stream.  @sc{posix} mandates that such "
"sequences are @emph{not} matched by @samp{.}, so that there is no portable "
"way to clear @command{sed}'s buffers in the middle of the script in most "
"multibyte locales (including UTF-8 locales)."
msgstr ""

#. type: section
#: sed.texi:1720 sed.texi:1720 sed.texi:1722 sed.texi:1723
#, no-wrap
msgid "Addresses overview"
msgstr ""

#. type: node
#: sed.texi:1720 sed.texi:1818
#, no-wrap
msgid "Numeric Addresses"
msgstr ""

#. type: menuentry
#: sed.texi:1720
msgid "selecting lines by numbers"
msgstr ""

#. type: node
#: sed.texi:1720 sed.texi:1874
#, no-wrap
msgid "Regexp Addresses"
msgstr ""

#. type: section
#: sed.texi:1720 sed.texi:1875
#, no-wrap
msgid "selecting lines by text matching"
msgstr ""

#. type: section
#: sed.texi:1720 sed.texi:1989 sed.texi:1990
#, no-wrap
msgid "Range Addresses"
msgstr ""

#. type: menuentry
#: sed.texi:1720
msgid "selecting a range of lines"
msgstr ""

#. type: cindex
#: sed.texi:1725
#, no-wrap
msgid "addresses, numeric"
msgstr ""

#. type: cindex
#: sed.texi:1726
#, no-wrap
msgid "numeric addresses"
msgstr ""

#. type: Plain text
#: sed.texi:1730
msgid ""
"Addresses determine on which line(s) the @command{sed} command will be "
"executed. The following command replaces the word @samp{hello} with "
"@samp{world} only on line 144:"
msgstr ""

#. type: example
#: sed.texi:1735
#, no-wrap
msgid "sed '144s/hello/world/' input.txt > output.txt\n"
msgstr ""

#. type: Plain text
#: sed.texi:1744
msgid ""
"If no addresses are given, the command is performed on all lines.  The "
"following command replaces the word @samp{hello} with @samp{world} on all "
"lines in the input file:"
msgstr ""

#. type: cindex
#: sed.texi:1755
#, no-wrap
msgid "addresses, regular expression"
msgstr ""

#. type: cindex
#: sed.texi:1756
#, no-wrap
msgid "regular expression addresses"
msgstr ""

#. type: Plain text
#: sed.texi:1761
msgid ""
"Addresses can contain regular expressions to match lines based on content "
"instead of line numbers. The following command replaces the word "
"@samp{hello} with @samp{world} only in lines containing the word "
"@samp{apple}:"
msgstr ""

#. type: example
#: sed.texi:1766
#, no-wrap
msgid "sed '/apple/s/hello/world/' input.txt > output.txt\n"
msgstr ""

#. type: cindex
#: sed.texi:1772
#, no-wrap
msgid "addresses, range"
msgstr ""

#. type: cindex
#: sed.texi:1773
#, no-wrap
msgid "range addresses"
msgstr ""

#. type: Plain text
#: sed.texi:1779
msgid ""
"An address range is specified with two addresses separated by a comma "
"(@code{,}). Addresses can be numeric, regular expressions, or a mix of "
"both.  The following command replaces the word @samp{hello} with "
"@samp{world} only in lines 4 to 17 (inclusive):"
msgstr ""

#. type: example
#: sed.texi:1784
#, no-wrap
msgid "sed '4,17s/hello/world/' input.txt > output.txt\n"
msgstr ""

#. type: cindex
#: sed.texi:1790
#, no-wrap
msgid "Excluding lines"
msgstr ""

#. type: cindex
#: sed.texi:1791
#, no-wrap
msgid "Selecting non-matching lines"
msgstr ""

#. type: cindex
#: sed.texi:1792
#, no-wrap
msgid "addresses, negating"
msgstr ""

#. type: cindex
#: sed.texi:1793
#, no-wrap
msgid "addresses, excluding"
msgstr ""

#. type: Plain text
#: sed.texi:1801
msgid ""
"Appending the @code{!} character to the end of an address specification "
"(before the command letter) negates the sense of the match.  That is, if the "
"@code{!} character follows an address or an address range, then only lines "
"which do @emph{not} match the addresses will be selected. The following "
"command replaces the word @samp{hello} with @samp{world} only in lines "
"@emph{not} containing the word @samp{apple}:"
msgstr ""

#. type: example
#: sed.texi:1804
#, no-wrap
msgid "sed '/apple/!s/hello/world/' input.txt > output.txt\n"
msgstr ""

#. type: Plain text
#: sed.texi:1809
msgid ""
"The following command replaces the word @samp{hello} with @samp{world} only "
"in lines 1 to 3 and 18 till the last line of the input file (i.e. excluding "
"lines 4 to 17):"
msgstr ""

#. type: example
#: sed.texi:1812
#, no-wrap
msgid "sed '4,17!s/hello/world/' input.txt > output.txt\n"
msgstr ""

#. type: section
#: sed.texi:1819
#, no-wrap
msgid "Selecting lines by numbers"
msgstr ""

#. type: cindex
#: sed.texi:1820
#, no-wrap
msgid "Addresses, in @command{sed} scripts"
msgstr ""

#. type: cindex
#: sed.texi:1821
#, no-wrap
msgid "Line selection"
msgstr ""

#. type: cindex
#: sed.texi:1822
#, no-wrap
msgid "Selecting lines to process"
msgstr ""

#. type: Plain text
#: sed.texi:1825
msgid "Addresses in a @command{sed} script can be in any of the following forms:"
msgstr ""

#. type: cindex
#: sed.texi:1827
#, no-wrap
msgid "Address, numeric"
msgstr ""

#. type: cindex
#: sed.texi:1828
#, no-wrap
msgid "Line, selecting by number"
msgstr ""

#. type: table
#: sed.texi:1832
msgid ""
"Specifying a line number will match only that line in the input.  (Note that "
"@command{sed} counts lines continuously across all input files unless "
"@option{-i} or @option{-s} options are specified.)"
msgstr ""

#. type: item
#: sed.texi:1833 sed.texi:2270
#, no-wrap
msgid "$"
msgstr ""

#. type: cindex
#: sed.texi:1834
#, no-wrap
msgid "Address, last line"
msgstr ""

#. type: cindex
#: sed.texi:1835
#, no-wrap
msgid "Last line, selecting"
msgstr ""

#. type: cindex
#: sed.texi:1836
#, no-wrap
msgid "Line, selecting last"
msgstr ""

#. type: table
#: sed.texi:1840
msgid ""
"This address matches the last line of the last file of input, or the last "
"line of each file when the @option{-i} or @option{-s} options are specified."
msgstr ""

#. type: item
#: sed.texi:1842
#, no-wrap
msgid "@var{first}~@var{step}"
msgstr ""

#. type: cindex
#: sed.texi:1843
#, no-wrap
msgid "@acronym{GNU} extensions, @samp{@var{n}~@var{m}} addresses"
msgstr ""

#. type: table
#: sed.texi:1854
msgid ""
"This @acronym{GNU} extension matches every @var{step}th line starting with "
"line @var{first}.  In particular, lines will be selected when there exists a "
"non-negative @var{n} such that the current line-number equals @var{first} + "
"(@var{n} * @var{step}).  Thus, one would use @code{1~2} to select the "
"odd-numbered lines and @code{0~2} for even-numbered lines; to pick every "
"third line starting with the second, @samp{2~3} would be used; to pick every "
"fifth line starting with the tenth, use @samp{10~5}; and @samp{50~0} is just "
"an obscure way of saying @code{50}."
msgstr ""

#. type: table
#: sed.texi:1856
msgid "The following commands demonstrate the step address usage:"
msgstr ""

#. type: example
#: sed.texi:1861
#, no-wrap
msgid ""
"$ seq 10 | sed -n '0~4p'\n"
"4\n"
"8\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:1867
#, no-wrap
msgid ""
"$ seq 10 | sed -n '1~3p'\n"
"1\n"
"4\n"
"7\n"
"10\n"
msgstr ""

#. type: Plain text
#: sed.texi:1883
msgid ""
"@value{SSED} supports the following regular expression addresses.  The "
"default regular expression is @ref{BRE syntax, , Basic Regular Expression "
"(BRE)}.  If @option{-E} or @option{-r} options are used, The regular "
"expression should be in @ref{ERE syntax, , Extended Regular Expression "
"(ERE)} syntax.  @xref{BRE vs ERE}."
msgstr ""

#. type: item
#: sed.texi:1885
#, no-wrap
msgid "/@var{regexp}/"
msgstr ""

#. type: cindex
#: sed.texi:1886
#, no-wrap
msgid "Address, as a regular expression"
msgstr ""

#. type: cindex
#: sed.texi:1887
#, no-wrap
msgid "Line, selecting by regular expression match"
msgstr ""

#. type: table
#: sed.texi:1891
msgid ""
"This will select any line which matches the regular expression "
"@var{regexp}.  If @var{regexp} itself includes any @code{/} characters, each "
"must be escaped by a backslash (@code{\\})."
msgstr ""

#. type: table
#: sed.texi:1901
msgid ""
"The following command prints lines in @file{/etc/passwd} which end with "
"@samp{bash}@footnote{ There are of course many other ways to do the same, "
"e.g.  @example grep 'bash$' /etc/passwd awk -F: '$7 == \"/bin/bash\"' "
"/etc/passwd @end example }:"
msgstr ""

#. type: example
#: sed.texi:1904
#, no-wrap
msgid "sed -n '/bash$/p' /etc/passwd\n"
msgstr ""

#. type: cindex
#: sed.texi:1906
#, no-wrap
msgid "empty regular expression"
msgstr ""

#. type: cindex
#: sed.texi:1907
#, no-wrap
msgid "@value{SSEDEXT}, modifiers and the empty regular expression"
msgstr ""

#. type: table
#: sed.texi:1913
msgid ""
"The empty regular expression @samp{//} repeats the last regular expression "
"match (the same holds if the empty regular expression is passed to the "
"@code{s} command).  Note that modifiers to regular expressions are evaluated "
"when the regular expression is compiled, thus it is invalid to specify them "
"together with the empty regular expression."
msgstr ""

#. type: item
#: sed.texi:1914
#, no-wrap
msgid "\\%@var{regexp}%"
msgstr ""

#. type: table
#: sed.texi:1916
msgid "(The @code{%} may be replaced by any other single character.)"
msgstr ""

#. type: cindex
#: sed.texi:1917
#, no-wrap
msgid "Slash character, in regular expressions"
msgstr ""

#. type: table
#: sed.texi:1924
msgid ""
"This also matches the regular expression @var{regexp}, but allows one to use "
"a different delimiter than @code{/}.  This is particularly useful if the "
"@var{regexp} itself contains a lot of slashes, since it avoids the tedious "
"escaping of every @code{/}.  If @var{regexp} itself includes any delimiter "
"characters, each must be escaped by a backslash (@code{\\})."
msgstr ""

#. type: table
#: sed.texi:1927
msgid ""
"The following two commands are equivalent. They print lines which start with "
"@samp{/home/alice/documents/}:"
msgstr ""

#. type: example
#: sed.texi:1932
#, no-wrap
msgid ""
"sed -n '/^\\/home\\/alice\\/documents\\//p'\n"
"sed -n '\\%^/home/alice/documents/%p'\n"
"sed -n '\\;^/home/alice/documents/;p'\n"
msgstr ""

#. type: item
#: sed.texi:1935
#, no-wrap
msgid "/@var{regexp}/I"
msgstr ""

#. type: itemx
#: sed.texi:1936
#, no-wrap
msgid "\\%@var{regexp}%I"
msgstr ""

#. type: cindex
#: sed.texi:1938
#, no-wrap
msgid "case insensitive, regular expression"
msgstr ""

#. type: table
#: sed.texi:1942
msgid ""
"The @code{I} modifier to regular-expression matching is a @acronym{GNU} "
"extension which causes the @var{regexp} to be matched in a case-insensitive "
"manner."
msgstr ""

#. type: table
#: sed.texi:1946
msgid ""
"In many other programming languages, a lower case @code{i} is used for "
"case-insensitive regular expression matching. However, in @command{sed} the "
"@code{i} is used for the insert command (TODO: add @code{pxref})."
msgstr ""

#. type: table
#: sed.texi:1948
msgid "Observe the difference between the following examples."
msgstr ""

#. type: table
#: sed.texi:1951
msgid ""
"In this example, @code{/b/I} is the address: regular expression with "
"@code{I} modifier. @code{d} is the delete command:"
msgstr ""

#. type: example
#: sed.texi:1956
#, no-wrap
msgid ""
"$ printf \"%s\\n\" a b c | sed '/b/Id'\n"
"a\n"
"c\n"
msgstr ""

#. type: table
#: sed.texi:1962
msgid ""
"Here, @code{/b/} is the address: a regular expression.  @code{i} is the "
"insert command.  @code{d} is the value to insert.  A line with @samp{d} is "
"then inserted above the matched line:"
msgstr ""

#. type: example
#: sed.texi:1969
#, no-wrap
msgid ""
"$ printf \"%s\\n\" a b c | sed '/b/id'\n"
"a\n"
"d\n"
"b\n"
"c\n"
msgstr ""

#. type: item
#: sed.texi:1971
#, no-wrap
msgid "/@var{regexp}/M"
msgstr ""

#. type: itemx
#: sed.texi:1972
#, no-wrap
msgid "\\%@var{regexp}%M"
msgstr ""

#. type: cindex
#: sed.texi:1992
#, no-wrap
msgid "Range of lines"
msgstr ""

#. type: cindex
#: sed.texi:1993
#, no-wrap
msgid "Several lines, selecting"
msgstr ""

#. type: Plain text
#: sed.texi:1998
msgid ""
"An address range can be specified by specifying two addresses separated by a "
"comma (@code{,}).  An address range matches lines starting from where the "
"first address matches, and continues until the second address matches "
"(inclusively):"
msgstr ""

#. type: example
#: sed.texi:2004
#, no-wrap
msgid ""
"$ seq 10 | sed -n '4,6p'\n"
"4\n"
"5\n"
"6\n"
msgstr ""

#. type: Plain text
#: sed.texi:2011
msgid ""
"If the second address is a @var{regexp}, then checking for the ending match "
"will start with the line @emph{following} the line which matched the first "
"address: a range will always span at least two lines (except of course if "
"the input stream ends)."
msgstr ""

#. type: example
#: sed.texi:2016
#, no-wrap
msgid ""
"$ seq 10 | sed -n '4,/[0-9]/p'\n"
"4\n"
"5\n"
msgstr ""

#. type: Plain text
#: sed.texi:2021
msgid ""
"If the second address is a @var{number} less than (or equal to)  the line "
"matching the first address, then only the one line is matched:"
msgstr ""

#. type: example
#: sed.texi:2025
#, no-wrap
msgid ""
"$ seq 10 | sed -n '4,1p'\n"
"4\n"
msgstr ""

#. type: cindex
#: sed.texi:2027
#, no-wrap
msgid "Special addressing forms"
msgstr ""

#. type: cindex
#: sed.texi:2028
#, no-wrap
msgid "Range with start address of zero"
msgstr ""

#. type: cindex
#: sed.texi:2029
#, no-wrap
msgid "Zero, as range start address"
msgstr ""

#. type: cindex
#: sed.texi:2030
#, no-wrap
msgid "@var{addr1},+N"
msgstr ""

#. type: cindex
#: sed.texi:2031
#, no-wrap
msgid "@var{addr1},~N"
msgstr ""

#. type: cindex
#: sed.texi:2032
#, no-wrap
msgid "@acronym{GNU} extensions, special two-address forms"
msgstr ""

#. type: cindex
#: sed.texi:2033 sed.texi:4673
#, no-wrap
msgid "@acronym{GNU} extensions, @code{0} address"
msgstr ""

#. type: cindex
#: sed.texi:2034
#, no-wrap
msgid "@acronym{GNU} extensions, 0,@var{addr2} addressing"
msgstr ""

#. type: cindex
#: sed.texi:2035
#, no-wrap
msgid "@acronym{GNU} extensions, @var{addr1},+@var{N} addressing"
msgstr ""

#. type: cindex
#: sed.texi:2036
#, no-wrap
msgid "@acronym{GNU} extensions, @var{addr1},~@var{N} addressing"
msgstr ""

#. type: Plain text
#: sed.texi:2039
msgid ""
"@value{SSED} also supports some special two-address forms; all these are "
"@acronym{GNU} extensions:"
msgstr ""

#. type: item
#: sed.texi:2040
#, no-wrap
msgid "0,/@var{regexp}/"
msgstr ""

#. type: table
#: sed.texi:2050
msgid ""
"A line number of @code{0} can be used in an address specification like "
"@code{0,/@var{regexp}/} so that @command{sed} will try to match @var{regexp} "
"in the first input line too.  In other words, @code{0,/@var{regexp}/} is "
"similar to @code{1,/@var{regexp}/}, except that if @var{addr2} matches the "
"very first line of input the @code{0,/@var{regexp}/} form will consider it "
"to end the range, whereas the @code{1,/@var{regexp}/} form will match the "
"beginning of its range and hence make the range span up to the @emph{second} "
"occurrence of the regular expression."
msgstr ""

#. type: table
#: sed.texi:2054
msgid ""
"Note that this is the only place where the @code{0} address makes sense; "
"there is no 0-th line and commands which are given the @code{0} address in "
"any other way will give an error."
msgstr ""

#. type: table
#: sed.texi:2057
msgid ""
"The following examples demonstrate the difference between starting with "
"address 1 and 0:"
msgstr ""

#. type: example
#: sed.texi:2062
#, no-wrap
msgid ""
"$ seq 10 | sed -n '1,/[0-9]/p'\n"
"1\n"
"2\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:2065
#, no-wrap
msgid ""
"$ seq 10 | sed -n '0,/[0-9]/p'\n"
"1\n"
msgstr ""

#. type: item
#: sed.texi:2068
#, no-wrap
msgid "@var{addr1},+@var{N}"
msgstr ""

#. type: table
#: sed.texi:2070
msgid "Matches @var{addr1} and the @var{N} lines following @var{addr1}."
msgstr ""

#. type: example
#: sed.texi:2076
#, no-wrap
msgid ""
"$ seq 10 | sed -n '6,+2p'\n"
"6\n"
"7\n"
"8\n"
msgstr ""

#. type: table
#: sed.texi:2079 sed.texi:2094
msgid "@var{addr1} can be a line number or a regular expression."
msgstr ""

#. type: item
#: sed.texi:2080
#, no-wrap
msgid "@var{addr1},~@var{N}"
msgstr ""

#. type: table
#: sed.texi:2085
msgid ""
"Matches @var{addr1} and the lines following @var{addr1} until the next line "
"whose input line number is a multiple of @var{N}.  The following command "
"prints starting at line 6, until the next line which is a multiple of 4 "
"(i.e. line 8):"
msgstr ""

#. type: example
#: sed.texi:2091
#, no-wrap
msgid ""
"$ seq 10 | sed -n '6,~4p'\n"
"6\n"
"7\n"
"8\n"
msgstr ""

#. type: chapter
#: sed.texi:2101
#, no-wrap
msgid "Regular Expressions: selecting text"
msgstr ""

#. type: node
#: sed.texi:2114 sed.texi:2116
#, no-wrap
msgid "Regular Expressions Overview"
msgstr ""

#. type: menuentry
#: sed.texi:2114
msgid "Overview of Regular expression in @command{sed}"
msgstr ""

#. type: node
#: sed.texi:2114 sed.texi:2167
#, no-wrap
msgid "BRE vs ERE"
msgstr ""

#. type: menuentry
#: sed.texi:2114
msgid "Basic (BRE) and extended (ERE) regular expression syntax"
msgstr ""

#. type: node
#: sed.texi:2114 sed.texi:2226
#, no-wrap
msgid "BRE syntax"
msgstr ""

#. type: section
#: sed.texi:2114 sed.texi:2227
#, no-wrap
msgid "Overview of basic regular expression syntax"
msgstr ""

#. type: node
#: sed.texi:2114 sed.texi:2431
#, no-wrap
msgid "ERE syntax"
msgstr ""

#. type: section
#: sed.texi:2114 sed.texi:2432
#, no-wrap
msgid "Overview of extended regular expression syntax"
msgstr ""

#. type: menuentry
#: sed.texi:2114
msgid "Character Classes and Bracket Expressions::"
msgstr ""

#. type: node
#: sed.texi:2114 sed.texi:2684
#, no-wrap
msgid "regexp extensions"
msgstr ""

#. type: menuentry
#: sed.texi:2114
msgid "Additional regular expression commands"
msgstr ""

#. type: section
#: sed.texi:2114 sed.texi:2114 sed.texi:2802 sed.texi:2803
#, no-wrap
msgid "Back-references and Subexpressions"
msgstr ""

#. type: node
#: sed.texi:2114 sed.texi:2871
#, no-wrap
msgid "Escapes"
msgstr ""

#. type: menuentry
#: sed.texi:2114
msgid "Specifying special characters"
msgstr ""

#. type: section
#: sed.texi:2114 sed.texi:2939 sed.texi:2940
#, no-wrap
msgid "Locale Considerations"
msgstr ""

#. type: section
#: sed.texi:2117
#, no-wrap
msgid "Overview of regular expression in @command{sed}"
msgstr ""

#. type: Plain text
#: sed.texi:2131
msgid ""
"To know how to use @command{sed}, people should understand regular "
"expressions (@dfn{regexp} for short).  A regular expression is a pattern "
"that is matched against a subject string from left to right.  Most "
"characters are @dfn{ordinary}: they stand for themselves in a pattern, and "
"match the corresponding characters.  Regular expressions in @command{sed} "
"are specified between two slashes."
msgstr ""

#. type: Plain text
#: sed.texi:2134
msgid "The following command prints lines containing the word @samp{hello}:"
msgstr ""

#. type: example
#: sed.texi:2137
#, no-wrap
msgid "sed -n '/hello/p'\n"
msgstr ""

#. type: Plain text
#: sed.texi:2140
msgid "The above example is equivalent to this @command{grep} command:"
msgstr ""

#. type: example
#: sed.texi:2143
#, no-wrap
msgid "grep 'hello'\n"
msgstr ""

#. type: Plain text
#: sed.texi:2149
msgid ""
"The power of regular expressions comes from the ability to include "
"alternatives and repetitions in the pattern.  These are encoded in the "
"pattern by the use of @dfn{special characters}, which do not stand for "
"themselves but instead are interpreted in some special way."
msgstr ""

#. type: Plain text
#: sed.texi:2155
msgid ""
"The character @code{^} (caret) in a regular expression matches the beginning "
"of the line. The character @code{.} (dot) matches any single character. The "
"following @command{sed} command matches and prints lines which start with "
"the letter @samp{b}, followed by any single character, followed by the "
"letter @samp{d}:"
msgstr ""

#. type: example
#: sed.texi:2162
#, no-wrap
msgid ""
"$ printf \"%s\\n\" abode bad bed bit bid byte body | sed -n '/^b.d/p'\n"
"bad\n"
"bed\n"
"bid\n"
"body\n"
msgstr ""

#. type: Plain text
#: sed.texi:2166
msgid ""
"The following sections explain the meaning and usage of special characters "
"in regular expressions."
msgstr ""

#. type: section
#: sed.texi:2168
#, no-wrap
msgid "Basic (BRE) and extended (ERE) regular expression"
msgstr ""

#. type: Plain text
#: sed.texi:2175
msgid ""
"Basic and extended regular expressions are two variations on the syntax of "
"the specified pattern. Basic Regular Expression (BRE) is the default in "
"@command{sed} (and similarly in @command{grep}).  Extended Regular "
"Expression syntax (ERE) is activated by using the @option{-r} or @option{-E} "
"options (and similarly, @command{grep -E})."
msgstr ""

#. type: Plain text
#: sed.texi:2179
msgid ""
"In @value{SSED} the only difference between basic and extended regular "
"expressions is in the behavior of a few special characters: @samp{?}, "
"@samp{+}, parentheses, braces (@samp{@{@}}), and @samp{|}."
msgstr ""

#. type: Plain text
#: sed.texi:2184
msgid ""
"With basic (BRE) syntax, these characters do not have special meaning unless "
"prefixed backslash (@samp{\\}); While with extended (ERE) syntax it is "
"reversed: these characters are special unless they are prefixed with "
"backslash (@samp{\\})."
msgstr ""

#. type: multitable
#: sed.texi:2190
msgid "@headitem Desired pattern"
msgstr ""

#. type: multitable
#: sed.texi:2190
msgid "Basic (BRE) Syntax"
msgstr ""

#. type: multitable
#: sed.texi:2190
msgid "Extended (ERE) Syntax"
msgstr ""

#. type: item
#: sed.texi:2191
#, no-wrap
msgid "literal @samp{+} (plus sign)"
msgstr ""

#. type: example
#: sed.texi:2197
#, no-wrap
msgid ""
"$ echo \"a+b=c\" | sed -n '/a+b/p'\n"
"a+b=c\n"
msgstr ""

#. type: example
#: sed.texi:2203
#, no-wrap
msgid ""
"$ echo \"a+b=c\" | sed -E -n '/a\\+b/p'\n"
"a+b=c\n"
msgstr ""

#. type: item
#: sed.texi:2206
#, no-wrap
msgid "One or more @samp{a} characters followed by @samp{b}"
msgstr ""

#. type: multitable
#: sed.texi:2208
msgid "(plus sign as special meta-character)"
msgstr ""

#. type: example
#: sed.texi:2213
#, no-wrap
msgid ""
"$ echo \"aab\" | sed -n '/a\\+b/p'\n"
"aab\n"
msgstr ""

#. type: example
#: sed.texi:2219
#, no-wrap
msgid ""
"$ echo \"aab\" | sed -E -n '/a+b/p'\n"
"aab\n"
msgstr ""

#. type: Plain text
#: sed.texi:2231
msgid ""
"Here is a brief description of regular expression syntax as used in "
"@command{sed}."
msgstr ""

#. type: var{#1}
#: sed.texi:2233
#, no-wrap
msgid "char"
msgstr ""

#. type: table
#: sed.texi:2235
msgid "A single ordinary character matches itself."
msgstr ""

#. type: item
#: sed.texi:2236
#, no-wrap
msgid "*"
msgstr ""

#. type: cindex
#: sed.texi:2237 sed.texi:2288 sed.texi:2292 sed.texi:2311 sed.texi:2327 sed.texi:4610
#, no-wrap
msgid "@acronym{GNU} extensions, to basic regular expressions"
msgstr ""

#. type: table
#: sed.texi:2248
msgid ""
"Matches a sequence of zero or more instances of matches for the preceding "
"regular expression, which must be an ordinary character, a special character "
"preceded by @code{\\}, a @code{.}, a grouped regexp (see below), or a "
"bracket expression.  As a @acronym{GNU} extension, a postfixed regular "
"expression can also be followed by @code{*}; for example, @code{a**} is "
"equivalent to @code{a*}.  @acronym{POSIX} 1003.1-2001 says that @code{*} "
"stands for itself when it appears at the start of a regular expression or "
"subexpression, but many non@acronym{GNU} implementations do not support this "
"and portable scripts should instead use @code{\\*} in these contexts."
msgstr ""

#. type: item
#: sed.texi:2248
#, no-wrap
msgid "."
msgstr ""

#. type: table
#: sed.texi:2250
msgid "Matches any character, including newline."
msgstr ""

#. type: item
#: sed.texi:2251 sed.texi:2637
#, no-wrap
msgid "^"
msgstr ""

#. type: table
#: sed.texi:2255
msgid ""
"Matches the null string at beginning of the pattern space, i.e. what appears "
"after the circumflex must appear at the beginning of the pattern space."
msgstr ""

#. type: table
#: sed.texi:2263
msgid ""
"In most scripts, pattern space is initialized to the content of each line "
"(@pxref{Execution Cycle, , How @code{sed} works}).  So, it is a useful "
"simplification to think of @code{^#include} as matching only lines where "
"@samp{#include} is the first thing on line---if there are spaces before, for "
"example, the match fails.  This simplification is valid as long as the "
"original content of pattern space is not modified, for example with an "
"@code{s} command."
msgstr ""

#. type: table
#: sed.texi:2269
msgid ""
"@code{^} acts as a special character only at the beginning of the regular "
"expression or subexpression (that is, after @code{\\(} or @code{\\|}).  "
"Portable scripts should avoid @code{^} at the beginning of a subexpression, "
"though, as @acronym{POSIX} allows implementations that treat @code{^} as an "
"ordinary character in that context."
msgstr ""

#. type: table
#: sed.texi:2276
msgid ""
"It is the same as @code{^}, but refers to end of pattern space.  @code{$} "
"also acts as a special character only at the end of the regular expression "
"or subexpression (that is, before @code{\\)} or @code{\\|}), and its use at "
"the end of a subexpression is not portable."
msgstr ""

#. type: item
#: sed.texi:2278
#, no-wrap
msgid "[@var{list}]"
msgstr ""

#. type: itemx
#: sed.texi:2279
#, no-wrap
msgid "[^@var{list}]"
msgstr ""

#. type: table
#: sed.texi:2286
msgid ""
"Matches any single character in @var{list}: for example, @code{[aeiou]} "
"matches all vowels.  A list may include sequences like "
"@code{@var{char1}-@var{char2}}, which matches any character between "
"(inclusive) @var{char1} and @var{char2}.  @xref{Character Classes and "
"Bracket Expressions}."
msgstr ""

#. type: item
#: sed.texi:2287
#, no-wrap
msgid "\\+"
msgstr ""

#. type: table
#: sed.texi:2290
msgid "As @code{*}, but matches one or more.  It is a @acronym{GNU} extension."
msgstr ""

#. type: item
#: sed.texi:2291
#, no-wrap
msgid "\\?"
msgstr ""

#. type: table
#: sed.texi:2294
msgid "As @code{*}, but only matches zero or one.  It is a @acronym{GNU} extension."
msgstr ""

#. type: item
#: sed.texi:2295
#, no-wrap
msgid "\\@{@var{i}\\@}"
msgstr ""

#. type: table
#: sed.texi:2299
msgid ""
"As @code{*}, but matches exactly @var{i} sequences (@var{i} is a decimal "
"integer; for portability, keep it between 0 and 255 inclusive)."
msgstr ""

#. type: item
#: sed.texi:2300
#, no-wrap
msgid "\\@{@var{i},@var{j}\\@}"
msgstr ""

#. type: table
#: sed.texi:2302
msgid "Matches between @var{i} and @var{j}, inclusive, sequences."
msgstr ""

#. type: item
#: sed.texi:2303
#, no-wrap
msgid "\\@{@var{i},\\@}"
msgstr ""

#. type: table
#: sed.texi:2305
msgid "Matches more than or equal to @var{i} sequences."
msgstr ""

#. type: item
#: sed.texi:2306
#, no-wrap
msgid "\\(@var{regexp}\\)"
msgstr ""

#. type: table
#: sed.texi:2308
msgid "Groups the inner @var{regexp} as a whole, this is used to:"
msgstr ""

#. type: itemize
#: sed.texi:2320
msgid ""
"Apply postfix operators, like @code{\\(abcd\\)*}: this will search for zero "
"or more whole sequences of @samp{abcd}, while @code{abcd*} would search for "
"@samp{abc} followed by zero or more occurrences of @samp{d}.  Note that "
"support for @code{\\(abcd\\)*} is required by @acronym{POSIX} 1003.1-2001, "
"but many non-@acronym{GNU} implementations do not support it and hence it is "
"not universally portable."
msgstr ""

#. type: itemize
#: sed.texi:2323
msgid "Use back references (see below)."
msgstr ""

#. type: item
#: sed.texi:2326
#, no-wrap
msgid "@var{regexp1}\\|@var{regexp2}"
msgstr ""

#. type: table
#: sed.texi:2333
msgid ""
"Matches either @var{regexp1} or @var{regexp2}.  Use parentheses to use "
"complex alternative regular expressions.  The matching process tries each "
"alternative in turn, from left to right, and the first one that succeeds is "
"used.  It is a @acronym{GNU} extension."
msgstr ""

#. type: item
#: sed.texi:2334
#, no-wrap
msgid "@var{regexp1}@var{regexp2}"
msgstr ""

#. type: table
#: sed.texi:2339
msgid ""
"Matches the concatenation of @var{regexp1} and @var{regexp2}.  Concatenation "
"binds more tightly than @code{\\|}, @code{^}, and @code{$}, but less tightly "
"than the other regular expression operators."
msgstr ""

#. type: item
#: sed.texi:2340
#, no-wrap
msgid "\\@var{digit}"
msgstr ""

#. type: table
#: sed.texi:2345
msgid ""
"Matches the @var{digit}-th @code{\\(@dots{}\\)} parenthesized subexpression "
"in the regular expression.  This is called a @dfn{back reference}.  "
"Subexpressions are implicitly numbered by counting occurrences of @code{\\(} "
"left-to-right."
msgstr ""

#. type: item
#: sed.texi:2346 sed.texi:2906
#, no-wrap
msgid "\\n"
msgstr ""

#. type: table
#: sed.texi:2348
msgid "Matches the newline character."
msgstr ""

#. type: item
#: sed.texi:2349
#, no-wrap
msgid "\\@var{char}"
msgstr ""

#. type: table
#: sed.texi:2357
msgid ""
"Matches @var{char}, where @var{char} is one of @code{$}, @code{*}, @code{.}, "
"@code{[}, @code{\\}, or @code{^}.  Note that the only C-like backslash "
"sequences that you can portably assume to be interpreted are @code{\\n} and "
"@code{\\\\}; in particular @code{\\t} is not portable, and matches a "
"@samp{t} under most implementations of @command{sed}, rather than a tab "
"character."
msgstr ""

#. type: cindex
#: sed.texi:2360
#, no-wrap
msgid "Greedy regular expression matching"
msgstr ""

#. type: Plain text
#: sed.texi:2364
msgid ""
"Note that the regular expression matcher is greedy, i.e., matches are "
"attempted from left to right and, if two or more matches are possible "
"starting at the same character, it selects the longest."
msgstr ""

#. type: Plain text
#: sed.texi:2367 sed.texi:2446
msgid "Examples:"
msgstr ""

#. type: item
#: sed.texi:2368
#, no-wrap
msgid "abcdef"
msgstr ""

#. type: table
#: sed.texi:2370
msgid "Matches @samp{abcdef}."
msgstr ""

#. type: item
#: sed.texi:2371
#, no-wrap
msgid "a*b"
msgstr ""

#. type: table
#: sed.texi:2374
msgid ""
"Matches zero or more @samp{a}s followed by a single @samp{b}.  For example, "
"@samp{b} or @samp{aaaaab}."
msgstr ""

#. type: item
#: sed.texi:2375
#, no-wrap
msgid "a\\?b"
msgstr ""

#. type: table
#: sed.texi:2377
msgid "Matches @samp{b} or @samp{ab}."
msgstr ""

#. type: item
#: sed.texi:2378
#, no-wrap
msgid "a\\+b\\+"
msgstr ""

#. type: table
#: sed.texi:2383
msgid ""
"Matches one or more @samp{a}s followed by one or more @samp{b}s: @samp{ab} "
"is the shortest possible match, but other examples are @samp{aaaab} or "
"@samp{abbbbb} or @samp{aaaaaabbbbbbb}."
msgstr ""

#. type: item
#: sed.texi:2384
#, no-wrap
msgid ".*"
msgstr ""

#. type: itemx
#: sed.texi:2385
#, no-wrap
msgid ".\\+"
msgstr ""

#. type: table
#: sed.texi:2390
msgid ""
"These two both match all the characters in a string; however, the first "
"matches every string (including the empty string), while the second matches "
"only strings containing at least one character."
msgstr ""

#. type: item
#: sed.texi:2391
#, no-wrap
msgid "^main.*(.*)"
msgstr ""

#. type: table
#: sed.texi:2396
msgid ""
"This matches a string starting with @samp{main}, followed by an opening and "
"closing parenthesis.  The @samp{n}, @samp{(} and @samp{)} need not be "
"adjacent."
msgstr ""

#. type: item
#: sed.texi:2397
#, no-wrap
msgid "^#"
msgstr ""

#. type: table
#: sed.texi:2399
msgid "This matches a string beginning with @samp{#}."
msgstr ""

#. type: item
#: sed.texi:2400
#, no-wrap
msgid "\\\\$"
msgstr ""

#. type: table
#: sed.texi:2403
msgid ""
"This matches a string ending with a single backslash.  The regexp contains "
"two backslashes for escaping."
msgstr ""

#. type: item
#: sed.texi:2404
#, no-wrap
msgid "\\$"
msgstr ""

#. type: table
#: sed.texi:2407
msgid ""
"Instead, this matches a string consisting of a single dollar sign, because "
"it is escaped."
msgstr ""

#. type: item
#: sed.texi:2408
#, no-wrap
msgid "[a-zA-Z0-9]"
msgstr ""

#. type: table
#: sed.texi:2410
msgid "In the C locale, this matches any @acronym{ASCII} letters or digits."
msgstr ""

#. type: item
#: sed.texi:2411
#, no-wrap
msgid "[^ @kbd{tab}]\\+"
msgstr ""

#. type: table
#: sed.texi:2416
msgid ""
"(Here @kbd{tab} stands for a single tab character.)  This matches a string "
"of one or more characters, none of which is a space or a tab.  Usually this "
"means a word."
msgstr ""

#. type: item
#: sed.texi:2417
#, no-wrap
msgid "^\\(.*\\)\\n\\1$"
msgstr ""

#. type: table
#: sed.texi:2420
msgid ""
"This matches a string consisting of two equal substrings separated by a "
"newline."
msgstr ""

#. type: item
#: sed.texi:2421
#, no-wrap
msgid ".\\@{9\\@}A$"
msgstr ""

#. type: table
#: sed.texi:2423
msgid "This matches nine characters followed by an @samp{A} at the end of a line."
msgstr ""

#. type: item
#: sed.texi:2424
#, no-wrap
msgid "^.\\@{15\\@}A"
msgstr ""

#. type: table
#: sed.texi:2427
msgid ""
"This matches the start of a string that contains 16 characters, the last of "
"which is an @samp{A}."
msgstr ""

#. type: cindex
#: sed.texi:2433
#, no-wrap
msgid "Extended regular expressions, syntax"
msgstr ""

#. type: Plain text
#: sed.texi:2443
msgid ""
"The only difference between basic and extended regular expressions is in the "
"behavior of a few characters: @samp{?}, @samp{+}, parentheses, braces "
"(@samp{@{@}}), and @samp{|}.  While basic regular expressions require these "
"to be escaped if you want them to behave as special characters, when using "
"extended regular expressions you must escape them if you want them @emph{to "
"match a literal character}.  @samp{|} is special here because @samp{\\|} is "
"a GNU extension -- standard basic regular expressions do not provide its "
"functionality."
msgstr ""

#. type: item
#: sed.texi:2447
#, no-wrap
msgid "abc?"
msgstr ""

#. type: table
#: sed.texi:2450
msgid ""
"becomes @samp{abc\\?} when using extended regular expressions.  It matches "
"the literal string @samp{abc?}."
msgstr ""

#. type: item
#: sed.texi:2451
#, no-wrap
msgid "c\\+"
msgstr ""

#. type: table
#: sed.texi:2454
msgid ""
"becomes @samp{c+} when using extended regular expressions.  It matches one "
"or more @samp{c}s."
msgstr ""

#. type: item
#: sed.texi:2455
#, no-wrap
msgid "a\\@{3,\\@}"
msgstr ""

#. type: table
#: sed.texi:2458
msgid ""
"becomes @samp{a@{3,@}} when using extended regular expressions.  It matches "
"three or more @samp{a}s."
msgstr ""

#. type: item
#: sed.texi:2459
#, no-wrap
msgid "\\(abc\\)\\@{2,3\\@}"
msgstr ""

#. type: table
#: sed.texi:2462
msgid ""
"becomes @samp{(abc)@{2,3@}} when using extended regular expressions.  It "
"matches either @samp{abcabc} or @samp{abcabcabc}."
msgstr ""

#. type: item
#: sed.texi:2463
#, no-wrap
msgid "\\(abc*\\)\\1"
msgstr ""

#. type: table
#: sed.texi:2467
msgid ""
"becomes @samp{(abc*)\\1} when using extended regular expressions.  "
"Backreferences must still be escaped when using extended regular "
"expressions."
msgstr ""

#. type: item
#: sed.texi:2468
#, no-wrap
msgid "a\\|b"
msgstr ""

#. type: table
#: sed.texi:2471
msgid ""
"becomes @samp{a|b} when using extended regular expressions.  It matches "
"@samp{a} or @samp{b}."
msgstr ""

#. type: section
#: sed.texi:2473 sed.texi:2474
#, no-wrap
msgid "Character Classes and Bracket Expressions"
msgstr ""

#. type: cindex
#: sed.texi:2478
#, no-wrap
msgid "bracket expression"
msgstr ""

#. type: cindex
#: sed.texi:2479
#, no-wrap
msgid "character class"
msgstr ""

#. type: Plain text
#: sed.texi:2487
msgid ""
"A @dfn{bracket expression} is a list of characters enclosed by @samp{[} and "
"@samp{]}.  It matches any single character in that list; if the first "
"character of the list is the caret @samp{^}, then it matches any character "
"@strong{not} in the list.  For example, the following command replaces the "
"words @samp{gray} or @samp{grey} with @samp{blue}:"
msgstr ""

#. type: example
#: sed.texi:2490
#, no-wrap
msgid "sed  's/gr[ae]y/blue/'\n"
msgstr ""

#. type: Plain text
#: sed.texi:2497
msgid ""
"Bracket expressions can be used in both @ref{BRE syntax,,basic} and @ref{ERE "
"syntax,,extended} regular expressions (that is, with or without the "
"@option{-E}/@option{-r} options)."
msgstr ""

#. type: cindex
#: sed.texi:2498
#, no-wrap
msgid "range expression"
msgstr ""

#. type: Plain text
#: sed.texi:2505
msgid ""
"Within a bracket expression, a @dfn{range expression} consists of two "
"characters separated by a hyphen.  It matches any single character that "
"sorts between the two characters, inclusive.  In the default C locale, the "
"sorting sequence is the native character order; for example, @samp{[a-d]} is "
"equivalent to @samp{[abcd]}."
msgstr ""

#. type: Plain text
#: sed.texi:2509
msgid ""
"Finally, certain named classes of characters are predefined within bracket "
"expressions, as follows."
msgstr ""

#. type: Plain text
#: sed.texi:2512
msgid ""
"These named classes must be used @emph{inside} brackets themselves. Correct "
"usage:"
msgstr ""

#. type: example
#: sed.texi:2515
#, no-wrap
msgid ""
"$ echo 1 | sed 's/[[:digit:]]/X/'\n"
"X\n"
msgstr ""

#. type: Plain text
#: sed.texi:2521
msgid ""
"Incorrect usage is rejected by newer @command{sed} versions.  Older versions "
"accepted it but treated it as a single bracket expression (which is "
"equivalent to @samp{[dgit:]}, that is, only the characters @var{d/g/i/t/:}):"
msgstr ""

#. type: example
#: sed.texi:2525
#, no-wrap
msgid ""
"# current GNU sed versions - incorrect usage rejected\n"
"$ echo 1 | sed 's/[:digit:]/X/'\n"
"sed: character class syntax is [[:space:]], not [:space:]\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:2529
#, no-wrap
msgid ""
"# older GNU sed versions\n"
"$ echo 1 | sed 's/[:digit:]/X/'\n"
"1\n"
msgstr ""

#. type: cindex
#: sed.texi:2532
#, no-wrap
msgid "classes of characters"
msgstr ""

#. type: cindex
#: sed.texi:2533
#, no-wrap
msgid "character classes"
msgstr ""

#. type: cindex
#: sed.texi:2534
#, no-wrap
msgid "named character classes"
msgstr ""

#. type: item
#: sed.texi:2537
#, no-wrap
msgid "[:alnum:]"
msgstr ""

#. type: opindex
#: sed.texi:2538
#, no-wrap
msgid "alnum @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2539
#, no-wrap
msgid "alphanumeric characters"
msgstr ""

#. type: table
#: sed.texi:2543
msgid ""
"Alphanumeric characters: @samp{[:alpha:]} and @samp{[:digit:]}; in the "
"@samp{C} locale and ASCII character encoding, this is the same as "
"@samp{[0-9A-Za-z]}."
msgstr ""

#. type: item
#: sed.texi:2544
#, no-wrap
msgid "[:alpha:]"
msgstr ""

#. type: opindex
#: sed.texi:2545
#, no-wrap
msgid "alpha @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2546
#, no-wrap
msgid "alphabetic characters"
msgstr ""

#. type: table
#: sed.texi:2550
msgid ""
"Alphabetic characters: @samp{[:lower:]} and @samp{[:upper:]}; in the "
"@samp{C} locale and ASCII character encoding, this is the same as "
"@samp{[A-Za-z]}."
msgstr ""

#. type: item
#: sed.texi:2551
#, no-wrap
msgid "[:blank:]"
msgstr ""

#. type: opindex
#: sed.texi:2552
#, no-wrap
msgid "blank @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2553
#, no-wrap
msgid "blank characters"
msgstr ""

#. type: table
#: sed.texi:2556
msgid "Blank characters: space and tab."
msgstr ""

#. type: item
#: sed.texi:2557
#, no-wrap
msgid "[:cntrl:]"
msgstr ""

#. type: opindex
#: sed.texi:2558
#, no-wrap
msgid "cntrl @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2559
#, no-wrap
msgid "control characters"
msgstr ""

#. type: table
#: sed.texi:2565
msgid ""
"Control characters.  In ASCII, these characters have octal codes 000 through "
"037, and 177 (DEL).  In other character sets, these are the equivalent "
"characters, if any."
msgstr ""

#. type: item
#: sed.texi:2566
#, no-wrap
msgid "[:digit:]"
msgstr ""

#. type: opindex
#: sed.texi:2567
#, no-wrap
msgid "digit @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2568
#, no-wrap
msgid "digit characters"
msgstr ""

#. type: cindex
#: sed.texi:2569
#, no-wrap
msgid "numeric characters"
msgstr ""

#. type: table
#: sed.texi:2571
msgid "Digits: @code{0 1 2 3 4 5 6 7 8 9}."
msgstr ""

#. type: item
#: sed.texi:2572
#, no-wrap
msgid "[:graph:]"
msgstr ""

#. type: opindex
#: sed.texi:2573
#, no-wrap
msgid "graph @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2574
#, no-wrap
msgid "graphic characters"
msgstr ""

#. type: table
#: sed.texi:2577
msgid "Graphical characters: @samp{[:alnum:]} and @samp{[:punct:]}."
msgstr ""

#. type: item
#: sed.texi:2578
#, no-wrap
msgid "[:lower:]"
msgstr ""

#. type: opindex
#: sed.texi:2579
#, no-wrap
msgid "lower @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2580
#, no-wrap
msgid "lower-case letters"
msgstr ""

#. type: table
#: sed.texi:2584
msgid ""
"Lower-case letters; in the @samp{C} locale and ASCII character encoding, "
"this is @code{a b c d e f g h i j k l m n o p q r s t u v w x y z}."
msgstr ""

#. type: item
#: sed.texi:2585
#, no-wrap
msgid "[:print:]"
msgstr ""

#. type: opindex
#: sed.texi:2586
#, no-wrap
msgid "print @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2587
#, no-wrap
msgid "printable characters"
msgstr ""

#. type: table
#: sed.texi:2590
msgid "Printable characters: @samp{[:alnum:]}, @samp{[:punct:]}, and space."
msgstr ""

#. type: item
#: sed.texi:2591
#, no-wrap
msgid "[:punct:]"
msgstr ""

#. type: opindex
#: sed.texi:2592
#, no-wrap
msgid "punct @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2593
#, no-wrap
msgid "punctuation characters"
msgstr ""

#. type: table
#: sed.texi:2597
msgid ""
"Punctuation characters; in the @samp{C} locale and ASCII character encoding, "
"this is @code{!@: \" # $ % & ' ( ) * + , - .@: / : ; < = > ?@: @@ [ \\ ] ^ _ "
"` @{ | @} ~}."
msgstr ""

#. type: item
#: sed.texi:2598
#, no-wrap
msgid "[:space:]"
msgstr ""

#. type: opindex
#: sed.texi:2599
#, no-wrap
msgid "space @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2600
#, no-wrap
msgid "space characters"
msgstr ""

#. type: cindex
#: sed.texi:2601
#, no-wrap
msgid "whitespace characters"
msgstr ""

#. type: table
#: sed.texi:2604
msgid ""
"Space characters: in the @samp{C} locale, this is tab, newline, vertical "
"tab, form feed, carriage return, and space."
msgstr ""

#. type: item
#: sed.texi:2606
#, no-wrap
msgid "[:upper:]"
msgstr ""

#. type: opindex
#: sed.texi:2607
#, no-wrap
msgid "upper @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2608
#, no-wrap
msgid "upper-case letters"
msgstr ""

#. type: table
#: sed.texi:2612
msgid ""
"Upper-case letters: in the @samp{C} locale and ASCII character encoding, "
"this is @code{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}."
msgstr ""

#. type: item
#: sed.texi:2613
#, no-wrap
msgid "[:xdigit:]"
msgstr ""

#. type: opindex
#: sed.texi:2614
#, no-wrap
msgid "xdigit @r{character class}"
msgstr ""

#. type: cindex
#: sed.texi:2615
#, no-wrap
msgid "xdigit class"
msgstr ""

#. type: cindex
#: sed.texi:2616
#, no-wrap
msgid "hexadecimal digits"
msgstr ""

#. type: table
#: sed.texi:2619
msgid "Hexadecimal digits: @code{0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f}."
msgstr ""

#. type: Plain text
#: sed.texi:2624
msgid ""
"Note that the brackets in these class names are part of the symbolic names, "
"and must be included in addition to the brackets delimiting the bracket "
"expression."
msgstr ""

#. type: Plain text
#: sed.texi:2626
msgid "Most meta-characters lose their special meaning inside bracket expressions:"
msgstr ""

#. type: item
#: sed.texi:2628
#, no-wrap
msgid "]"
msgstr ""

#. type: table
#: sed.texi:2632
msgid ""
"ends the bracket expression if it's not the first list item.  So, if you "
"want to make the @samp{]} character a list item, you must put it first."
msgstr ""

#. type: item
#: sed.texi:2633
#, no-wrap
msgid "-"
msgstr ""

#. type: table
#: sed.texi:2636
msgid ""
"represents the range if it's not first or last in a list or the ending point "
"of a range."
msgstr ""

#. type: table
#: sed.texi:2641
msgid ""
"represents the characters not in the list.  If you want to make the @samp{^} "
"character a list item, place it anywhere but first."
msgstr ""

#. type: Plain text
#: sed.texi:2644
msgid "TODO: incorporate this paragraph (copied verbatim from BRE section)."
msgstr ""

#. type: cindex
#: sed.texi:2645
#, no-wrap
msgid "@code{POSIXLY_CORRECT} behavior, bracket expressions"
msgstr ""

#. type: Plain text
#: sed.texi:2657
msgid ""
"The characters @code{$}, @code{*}, @code{.}, @code{[}, and @code{\\} are "
"normally not special within @var{list}.  For example, @code{[\\*]} matches "
"either @samp{\\} or @samp{*}, because the @code{\\} is not special here.  "
"However, strings like @code{[.ch.]}, @code{[=a=]}, and @code{[:space:]} are "
"special within @var{list} and represent collating symbols, equivalence "
"classes, and character classes, respectively, and @code{[} is therefore "
"special within @var{list} when it is followed by @code{.}, @code{=}, or "
"@code{:}.  Also, when not in @env{POSIXLY_CORRECT} mode, special escapes "
"like @code{\\n} and @code{\\t} are recognized within @var{list}.  "
"@xref{Escapes}."
msgstr ""

#. type: item
#: sed.texi:2663
#, no-wrap
msgid "[."
msgstr ""

#. type: table
#: sed.texi:2665
msgid "represents the open collating symbol."
msgstr ""

#. type: item
#: sed.texi:2666
#, no-wrap
msgid ".]"
msgstr ""

#. type: table
#: sed.texi:2668
msgid "represents the close collating symbol."
msgstr ""

#. type: item
#: sed.texi:2669
#, no-wrap
msgid "[="
msgstr ""

#. type: table
#: sed.texi:2671
msgid "represents the open equivalence class."
msgstr ""

#. type: item
#: sed.texi:2672
#, no-wrap
msgid "=]"
msgstr ""

#. type: table
#: sed.texi:2674
msgid "represents the close equivalence class."
msgstr ""

#. type: item
#: sed.texi:2675
#, no-wrap
msgid "[:"
msgstr ""

#. type: table
#: sed.texi:2678
msgid ""
"represents the open character class symbol, and should be followed by a "
"valid character class name."
msgstr ""

#. type: item
#: sed.texi:2679
#, no-wrap
msgid ":]"
msgstr ""

#. type: table
#: sed.texi:2681
msgid "represents the close character class symbol."
msgstr ""

#. type: section
#: sed.texi:2685
#, no-wrap
msgid "regular expression extensions"
msgstr ""

#. type: Plain text
#: sed.texi:2689
msgid ""
"The following sequences have special meaning inside regular expressions "
"(used in @ref{Regexp Addresses,,addresses} and the @code{s} command)."
msgstr ""

#. type: Plain text
#: sed.texi:2694
msgid ""
"These can be used in both @ref{BRE syntax,,basic} and @ref{ERE "
"syntax,,extended} regular expressions (that is, with or without the "
"@option{-E}/@option{-r} options)."
msgstr ""

#. type: item
#: sed.texi:2696
#, no-wrap
msgid "\\w"
msgstr ""

#. type: table
#: sed.texi:2699
msgid ""
"Matches any ``word'' character.  A ``word'' character is any letter or digit "
"or the underscore character."
msgstr ""

#. type: example
#: sed.texi:2703
#, no-wrap
msgid ""
"$ echo \"abc %-= def.\" | sed 's/\\w/X/g'\n"
"XXX %-= XXX.\n"
msgstr ""

#. type: item
#: sed.texi:2706
#, no-wrap
msgid "\\W"
msgstr ""

#. type: table
#: sed.texi:2708
msgid "Matches any ``non-word'' character."
msgstr ""

#. type: example
#: sed.texi:2712
#, no-wrap
msgid ""
"$ echo \"abc %-= def.\" | sed 's/\\W/X/g'\n"
"abcXXXXXdefX\n"
msgstr ""

#. type: item
#: sed.texi:2715
#, no-wrap
msgid "\\b"
msgstr ""

#. type: table
#: sed.texi:2719
msgid ""
"Matches a word boundary; that is it matches if the character to the left is "
"a ``word'' character and the character to the right is a ``non-word'' "
"character, or vice-versa."
msgstr ""

#. type: example
#: sed.texi:2723
#, no-wrap
msgid ""
"$ echo \"abc %-= def.\" | sed 's/\\b/X/g'\n"
"XabcX %-= XdefX.\n"
msgstr ""

#. type: item
#: sed.texi:2726
#, no-wrap
msgid "\\B"
msgstr ""

#. type: table
#: sed.texi:2731
msgid ""
"Matches everywhere but on a word boundary; that is it matches if the "
"character to the left and the character to the right are either both "
"``word'' characters or both ``non-word'' characters."
msgstr ""

#. type: example
#: sed.texi:2735
#, no-wrap
msgid ""
"$ echo \"abc %-= def.\" | sed 's/\\w/X/g'\n"
"aXbXc X%X-X=X dXeXf.X\n"
msgstr ""

#. type: item
#: sed.texi:2738
#, no-wrap
msgid "\\s"
msgstr ""

#. type: table
#: sed.texi:2741
msgid ""
"Matches whitespace characters (spaces and tabs).  Newlines embedded in the "
"pattern/hold spaces will also match:"
msgstr ""

#. type: example
#: sed.texi:2745
#, no-wrap
msgid ""
"$ echo \"abc %-= def.\" | sed 's/\\s/X/g'\n"
"abcX%-=Xdef.\n"
msgstr ""

#. type: item
#: sed.texi:2748
#, no-wrap
msgid "\\S"
msgstr ""

#. type: table
#: sed.texi:2750
msgid "Matches non-whitespace characters."
msgstr ""

#. type: example
#: sed.texi:2754
#, no-wrap
msgid ""
"$ echo \"abc %-= def.\" | sed 's/\\w/X/g'\n"
"XXX XXX XXXX\n"
msgstr ""

#. type: item
#: sed.texi:2757
#, no-wrap
msgid "\\<"
msgstr ""

#. type: table
#: sed.texi:2759
msgid "Matches the beginning of a word."
msgstr ""

#. type: example
#: sed.texi:2763
#, no-wrap
msgid ""
"$ echo \"abc %-= def.\" | sed 's/\\</X/g'\n"
"Xabc %-= Xdef.\n"
msgstr ""

#. type: item
#: sed.texi:2766
#, no-wrap
msgid "\\>"
msgstr ""

#. type: table
#: sed.texi:2768
msgid "Matches the end of a word."
msgstr ""

#. type: example
#: sed.texi:2772
#, no-wrap
msgid ""
"$ echo \"abc %-= def.\" | sed 's/\\>/X/g'\n"
"abcX %-= defX.\n"
msgstr ""

#. type: item
#: sed.texi:2775
#, no-wrap
msgid "\\`"
msgstr ""

#. type: table
#: sed.texi:2778
msgid ""
"Matches only at the start of pattern space.  This is different from @code{^} "
"in multi-line mode."
msgstr ""

#. type: table
#: sed.texi:2780
msgid "Compare the following two examples:"
msgstr ""

#. type: example
#: sed.texi:2786
#, no-wrap
msgid ""
"$ printf \"a\\nb\\nc\\n\" | sed 'N;N;s/^/X/gm'\n"
"Xa\n"
"Xb\n"
"Xc\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:2791
#, no-wrap
msgid ""
"$ printf \"a\\nb\\nc\\n\" | sed 'N;N;s/\\`/X/gm'\n"
"Xa\n"
"b\n"
"c\n"
msgstr ""

#. type: item
#: sed.texi:2793
#, no-wrap
msgid "\\'"
msgstr ""

#. type: table
#: sed.texi:2796
msgid ""
"Matches only at the end of pattern space.  This is different from @code{$} "
"in multi-line mode."
msgstr ""

#. type: cindex
#: sed.texi:2804
#, no-wrap
msgid "subexpression"
msgstr ""

#. type: cindex
#: sed.texi:2805
#, no-wrap
msgid "back-reference"
msgstr ""

#. type: Plain text
#: sed.texi:2812
msgid ""
"@dfn{back-references} are regular expression commands which refer to a "
"previous part of the matched regular expression.  Back-references are "
"specified with backslash and a single digit (e.g. @samp{\\1}).  The part of "
"the regular expression they refer to is called a @dfn{subexpression}, and is "
"designated with parentheses."
msgstr ""

#. type: Plain text
#: sed.texi:2817
msgid ""
"Back-references and subexpressions are used in two cases: in the regular "
"expression search pattern, and in the @var{replacement} part of the "
"@command{s} command (@pxref{Regexp Addresses,,Regular Expression Addresses} "
"and @ref{The \"s\" Command})."
msgstr ""

#. type: Plain text
#: sed.texi:2824
msgid ""
"In a regular expression pattern, back-references are used to match the same "
"content as a previously matched subexpression.  In the following example, "
"the subexpression is @samp{.} - any single character (being surrounded by "
"parentheses makes it a subexpression). The back-reference @samp{\\1} asks to "
"match the same content (same character) as the sub-expression."
msgstr ""

#. type: Plain text
#: sed.texi:2828
msgid ""
"The command below matches words starting with any character, followed by the "
"letter @samp{o}, followed by the same character as the first."
msgstr ""

#. type: example
#: sed.texi:2838
#, no-wrap
msgid ""
"$ sed -E -n '/^(.)o\\1$/p' /usr/share/dict/words\n"
"bob\n"
"mom\n"
"non\n"
"pop\n"
"sos\n"
"tot\n"
"wow\n"
msgstr ""

#. type: Plain text
#: sed.texi:2844
msgid ""
"Multiple subexpressions are automatically numbered from left-to-right. This "
"command searches for 6-letter palindromes (the first three letters are 3 "
"subexpressions, followed by 3 back-references in reverse order):"
msgstr ""

#. type: example
#: sed.texi:2848
#, no-wrap
msgid ""
"$ sed -E -n '/^(.)(.)(.)\\3\\2\\1$/p' /usr/share/dict/words\n"
"redder\n"
msgstr ""

#. type: Plain text
#: sed.texi:2853
msgid ""
"In the @command{s} command, back-references can be used in the "
"@var{replacement} part to refer back to subexpressions in the @var{regexp} "
"part."
msgstr ""

#. type: Plain text
#: sed.texi:2857
msgid ""
"The following example uses two subexpressions in the regular expression to "
"match two space-separated words. The back-references in the "
"@var{replacement} part prints the words in a different order:"
msgstr ""

#. type: example
#: sed.texi:2861
#, no-wrap
msgid ""
"$ echo \"James Bond\" | sed -E 's/(.*) (.*)/The name is \\2, \\1 \\2./'\n"
"The name is Bond, James Bond.\n"
msgstr ""

#. type: Plain text
#: sed.texi:2869
msgid ""
"When used with alternation, if the group does not participate in the match "
"then the back-reference makes the whole match fail.  For example, "
"@samp{a(.)|b\\1} will not match @samp{ba}.  When multiple regular "
"expressions are given with @option{-e} or from a file (@samp{-f "
"@var{file}}), back-references are local to each expression."
msgstr ""

#. type: section
#: sed.texi:2872
#, no-wrap
msgid "Escape Sequences - specifying special characters"
msgstr ""

#. type: cindex
#: sed.texi:2874 sed.texi:4641
#, no-wrap
msgid "@acronym{GNU} extensions, special escapes"
msgstr ""

#. type: Plain text
#: sed.texi:2880
msgid ""
"Until this chapter, we have only encountered escapes of the form @samp{\\^}, "
"which tell @command{sed} not to interpret the circumflex as a special "
"character, but rather to take it literally.  For example, @samp{\\*} matches "
"a single asterisk rather than zero or more backslashes."
msgstr ""

#. type: cindex
#: sed.texi:2881
#, no-wrap
msgid "@code{POSIXLY_CORRECT} behavior, escapes"
msgstr ""

#. type: Plain text
#: sed.texi:2896
msgid ""
"This chapter introduces another kind of escape@footnote{All the escapes "
"introduced here are @acronym{GNU} extensions, with the exception of "
"@code{\\n}.  In basic regular expression mode, setting "
"@code{POSIXLY_CORRECT} disables them inside bracket expressions.}---that is, "
"escapes that are applied to a character or sequence of characters that "
"ordinarily are taken literally, and that @command{sed} replaces with a "
"special character.  This provides a way of encoding non-printable characters "
"in patterns in a visible manner.  There is no restriction on the appearance "
"of non-printing characters in a @command{sed} script but when a script is "
"being prepared in the shell or by text editing, it is usually easier to use "
"one of the following escape sequences than the binary character it "
"represents:"
msgstr ""

#. type: Plain text
#: sed.texi:2898
msgid "The list of these escapes is:"
msgstr ""

#. type: item
#: sed.texi:2900
#, no-wrap
msgid "\\a"
msgstr ""

#. type: table
#: sed.texi:2902
msgid ""
"Produces or matches a @sc{bel} character, that is an ``alert'' (@sc{ascii} "
"7)."
msgstr ""

#. type: item
#: sed.texi:2903
#, no-wrap
msgid "\\f"
msgstr ""

#. type: table
#: sed.texi:2905
msgid "Produces or matches a form feed (@sc{ascii} 12)."
msgstr ""

#. type: table
#: sed.texi:2908
msgid "Produces or matches a newline (@sc{ascii} 10)."
msgstr ""

#. type: item
#: sed.texi:2909
#, no-wrap
msgid "\\r"
msgstr ""

#. type: table
#: sed.texi:2911
msgid "Produces or matches a carriage return (@sc{ascii} 13)."
msgstr ""

#. type: item
#: sed.texi:2912
#, no-wrap
msgid "\\t"
msgstr ""

#. type: table
#: sed.texi:2914
msgid "Produces or matches a horizontal tab (@sc{ascii} 9)."
msgstr ""

#. type: item
#: sed.texi:2915
#, no-wrap
msgid "\\v"
msgstr ""

#. type: table
#: sed.texi:2917
msgid "Produces or matches a so called ``vertical tab'' (@sc{ascii} 11)."
msgstr ""

#. type: item
#: sed.texi:2918
#, no-wrap
msgid "\\c@var{x}"
msgstr ""

#. type: table
#: sed.texi:2924
msgid ""
"Produces or matches @kbd{@sc{Control}-@var{x}}, where @var{x} is any "
"character.  The precise effect of @samp{\\c@var{x}} is as follows: if "
"@var{x} is a lower case letter, it is converted to upper case.  Then bit 6 "
"of the character (hex 40) is inverted.  Thus @samp{\\cz} becomes hex 1A, but "
"@samp{\\c@{} becomes hex 3B, while @samp{\\c;} becomes hex 7B."
msgstr ""

#. type: item
#: sed.texi:2925
#, no-wrap
msgid "\\d@var{xxx}"
msgstr ""

#. type: table
#: sed.texi:2927
msgid "Produces or matches a character whose decimal @sc{ascii} value is @var{xxx}."
msgstr ""

#. type: item
#: sed.texi:2928
#, no-wrap
msgid "\\o@var{xxx}"
msgstr ""

#. type: table
#: sed.texi:2930
msgid "Produces or matches a character whose octal @sc{ascii} value is @var{xxx}."
msgstr ""

#. type: item
#: sed.texi:2931
#, no-wrap
msgid "\\x@var{xx}"
msgstr ""

#. type: table
#: sed.texi:2933
msgid ""
"Produces or matches a character whose hexadecimal @sc{ascii} value is "
"@var{xx}."
msgstr ""

#. type: Plain text
#: sed.texi:2937
msgid ""
"@samp{\\b} (backspace) was omitted because of the conflict with the existing "
"``word boundary'' meaning."
msgstr ""

#. type: Plain text
#: sed.texi:2944
msgid ""
"TODO: fix following paragraphs (copied verbatim from 'bracket expression' "
"section)."
msgstr ""

#. type: Plain text
#: sed.texi:2946
msgid ""
"TODO: mention locale support is heavily dependent on the OS/libc, not on "
"sed."
msgstr ""

#. type: Plain text
#: sed.texi:2949
msgid ""
"The current locale affects the characters matched by @command{sed}'s regular "
"expressions."
msgstr ""

#. type: Plain text
#: sed.texi:2958
msgid ""
"In other locales, the sorting sequence is not specified, and @samp{[a-d]} "
"might be equivalent to @samp{[abcd]} or to @samp{[aBbCcDd]}, or it might "
"fail to match any character, or the set of characters that it matches might "
"even be erratic.  To obtain the traditional interpretation of bracket "
"expressions, you can use the @samp{C} locale by setting the @env{LC_ALL} "
"environment variable to the value @samp{C}."
msgstr ""

#. type: example
#: sed.texi:2964
#, no-wrap
msgid ""
"# TODO: is there any real-world system/locale where 'A'\n"
"#       is replaced by '-' ?\n"
"$ echo A | sed 's/[a-z]/-/'\n"
"A\n"
msgstr ""

#. type: Plain text
#: sed.texi:2969
msgid ""
"Their interpretation depends on the @env{LC_CTYPE} locale; for example, "
"@samp{[[:alnum:]]} means the character class of numbers and letters in the "
"current locale."
msgstr ""

#. type: Plain text
#: sed.texi:2971
msgid "TODO: show example of collation"
msgstr ""

#. type: example
#: sed.texi:2976
#, no-wrap
msgid ""
"# TODO: this works on glibc systems, not on musl-libc/freebsd/macosx.\n"
"$ printf 'cliché\\n' | LC_ALL=fr_FR.utf8 sed 's/[[=e=]]/X/g'\n"
"clichX\n"
msgstr ""

#. type: node
#: sed.texi:2987 sed.texi:2989
#, no-wrap
msgid "Execution Cycle"
msgstr ""

#. type: menuentry
#: sed.texi:2987
msgid "How @command{sed} works"
msgstr ""

#. type: menuentry
#: sed.texi:2987
msgid "Hold and Pattern Buffers::"
msgstr ""

#. type: node
#: sed.texi:2987 sed.texi:3027
#, no-wrap
msgid "Multiline techniques"
msgstr ""

#. type: menuentry
#: sed.texi:2987
msgid "Using D,G,H,N,P to process multiple lines"
msgstr ""

#. type: node
#: sed.texi:2987 sed.texi:3173
#, no-wrap
msgid "Branching and flow control"
msgstr ""

#. type: section
#: sed.texi:2990
#, no-wrap
msgid "How @command{sed} Works"
msgstr ""

#. type: cindex
#: sed.texi:2992
#, no-wrap
msgid "Buffer spaces, pattern and hold"
msgstr ""

#. type: cindex
#: sed.texi:2993
#, no-wrap
msgid "Spaces, pattern and hold"
msgstr ""

#. type: cindex
#: sed.texi:2994
#, no-wrap
msgid "Pattern space, definition"
msgstr ""

#. type: cindex
#: sed.texi:2995
#, no-wrap
msgid "Hold space, definition"
msgstr ""

#. type: Plain text
#: sed.texi:2998
msgid ""
"@command{sed} maintains two data buffers: the active @emph{pattern} space, "
"and the auxiliary @emph{hold} space. Both are initially empty."
msgstr ""

#. type: Plain text
#: sed.texi:3006
msgid ""
"@command{sed} operates by performing the following cycle on each line of "
"input: first, @command{sed} reads one line from the input stream, removes "
"any trailing newline, and places it in the pattern space.  Then commands are "
"executed; each command can have an address associated to it: addresses are a "
"kind of condition code, and a command is only executed if the condition is "
"verified before the command is to be executed."
msgstr ""

#. type: Plain text
#: sed.texi:3016
msgid ""
"When the end of the script is reached, unless the @option{-n} option is in "
"use, the contents of pattern space are printed out to the output stream, "
"adding back the trailing newline if it was removed.@footnote{Actually, if "
"@command{sed} prints a line without the terminating newline, it will "
"nevertheless print the missing newline as soon as more text is sent to the "
"same output stream, which gives the ``least expected surprise'' even though "
"it does not make commands like @samp{sed -n p} exactly identical to "
"@command{cat}.} Then the next cycle starts for the next input line."
msgstr ""

#. type: Plain text
#: sed.texi:3021
msgid ""
"Unless special commands (like @samp{D}) are used, the pattern space is "
"deleted between two cycles. The hold space, on the other hand, keeps its "
"data between cycles (see commands @samp{h}, @samp{H}, @samp{x}, @samp{g}, "
"@samp{G} to move data between both buffers)."
msgstr ""

#. type: section
#: sed.texi:3022 sed.texi:3023
#, no-wrap
msgid "Hold and Pattern Buffers"
msgstr ""

#. type: Plain text
#: sed.texi:3026 sed.texi:3177
msgid "TODO"
msgstr ""

#. type: section
#: sed.texi:3028
#, no-wrap
msgid "Multiline techniques - using D,G,H,N,P to process multiple lines"
msgstr ""

#. type: Plain text
#: sed.texi:3036
msgid ""
"Multiple lines can be processed as one buffer using the "
"@code{D},@code{G},@code{H},@code{N},@code{P}. They are similar to their "
"lowercase counterparts (@code{d},@code{g}, @code{h},@code{n},@code{p}), "
"except that these commands append or subtract data while respecting embedded "
"newlines - allowing adding and removing lines from the pattern and hold "
"spaces."
msgstr ""

#. type: Plain text
#: sed.texi:3038
msgid "They operate as follows:"
msgstr ""

#. type: table
#: sed.texi:3042
msgid ""
"@emph{deletes} line from the pattern space until the first newline, and "
"restarts the cycle."
msgstr ""

#. type: table
#: sed.texi:3046
msgid ""
"@emph{appends} line from the hold space to the pattern space, with a newline "
"before it."
msgstr ""

#. type: table
#: sed.texi:3050
msgid ""
"@emph{appends} line from the pattern space to the hold space, with a newline "
"before it."
msgstr ""

#. type: table
#: sed.texi:3053
msgid "@emph{appends} line from the input file to the pattern space."
msgstr ""

#. type: table
#: sed.texi:3056
msgid "@emph{prints} line from the pattern space until the first newline."
msgstr ""

#. type: Plain text
#: sed.texi:3062
msgid ""
"The following example illustrates the operation of @code{N} and @code{D} "
"commands:"
msgstr ""

#. type: group
#: sed.texi:3073
#, no-wrap
msgid ""
"$ seq 6 | sed -n 'N;l;D'\n"
"1\\n2$\n"
"2\\n3$\n"
"3\\n4$\n"
"4\\n5$\n"
"5\\n6$\n"
msgstr ""

#. type: enumerate
#: sed.texi:3082
msgid ""
"@command{sed} starts by reading the first line into the pattern space "
"(i.e. @samp{1})."
msgstr ""

#. type: enumerate
#: sed.texi:3086
msgid ""
"At the beginning of every cycle, the @code{N} command appends a newline and "
"the next line to the pattern space (i.e. @samp{1}, @samp{\\n}, @samp{2} in "
"the first cycle)."
msgstr ""

#. type: enumerate
#: sed.texi:3089
msgid "The @code{l} command prints the content of the pattern space unambigiously."
msgstr ""

#. type: enumerate
#: sed.texi:3093
msgid ""
"The @code{D} command then removes the content of pattern space up to the "
"first newline (leaving @samp{2} at the end of the first cycle)."
msgstr ""

#. type: enumerate
#: sed.texi:3097
msgid ""
"At the next cycle the @code{N} command appends a newline and the next input "
"line to the pattern space (e.g. @samp{2}, @samp{\\n}, @samp{3})."
msgstr ""

#. type: cindex
#: sed.texi:3100
#, no-wrap
msgid "processing paragraphs"
msgstr ""

#. type: cindex
#: sed.texi:3101
#, no-wrap
msgid "paragraphs, processing"
msgstr ""

#. type: Plain text
#: sed.texi:3104
msgid ""
"A common technique to process blocks of text such as paragraphs (instead of "
"line-by-line) is using the following construct:"
msgstr ""

#. type: example
#: sed.texi:3109
#, no-wrap
msgid "sed '/./@{H;$!d@} ; x ; s/REGEXP/REPLACEMENT/'\n"
msgstr ""

#. type: enumerate
#: sed.texi:3119
msgid ""
"The first expression, @code{/./@{H;$!d@}} operates on all non-empty lines, "
"and adds the current line (in the pattern space) to the hold space.  On all "
"lines except the last, the pattern space is deleted and the cycle is "
"restarted."
msgstr ""

#. type: enumerate
#: sed.texi:3126
msgid ""
"The other expressions @code{x} and @code{s} are executed only on empty lines "
"(i.e. paragraph separators). The @code{x} command fetches the accumulated "
"lines from the hold space back to the pattern space. The @code{s///} command "
"then operates on all the text in the paragraph (including the embedded "
"newlines)."
msgstr ""

#. type: Plain text
#: sed.texi:3131
msgid ""
"The following example demonstrates this technique: @codequoteundirected on "
"@codequotebacktick on"
msgstr ""

#. type: group
#: sed.texi:3137
#, no-wrap
msgid ""
"$ cat input.txt\n"
"a a a aa aaa\n"
"aaaa aaaa aa\n"
"aaaa aaa aaa\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3141
#, no-wrap
msgid ""
"bbbb bbb bbb\n"
"bb bb bbb bb\n"
"bbbbbbbb bbb\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3145
#, no-wrap
msgid ""
"ccc ccc cccc\n"
"cccc ccccc c\n"
"cc cc cc cc\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3147
#, no-wrap
msgid ""
"$ sed '/./@{H;$!d@} ; x ; s/^/\\nSTART-->/ ; s/$/\\n<--END/' input.txt\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3153
#, no-wrap
msgid ""
"START-->\n"
"a a a aa aaa\n"
"aaaa aaaa aa\n"
"aaaa aaa aaa\n"
"<--END\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3159
#, no-wrap
msgid ""
"START-->\n"
"bbbb bbb bbb\n"
"bb bb bbb bb\n"
"bbbbbbbb bbb\n"
"<--END\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3165
#, no-wrap
msgid ""
"START-->\n"
"ccc ccc cccc\n"
"cccc ccccc c\n"
"cc cc cc cc\n"
"<--END\n"
msgstr ""

#. type: Plain text
#: sed.texi:3172
msgid ""
"For more annotated examples, @pxref{Text search across multiple lines} and "
"@ref{Line length adjustment}."
msgstr ""

#. type: section
#: sed.texi:3174
#, no-wrap
msgid "Branching and Flow Control"
msgstr ""

#. type: chapter
#: sed.texi:3179
#, no-wrap
msgid "Some Sample Scripts"
msgstr ""

#. type: Plain text
#: sed.texi:3183
msgid ""
"Here are some @command{sed} scripts to guide you in the art of mastering "
"@command{sed}."
msgstr ""

#. type: menuentry
#: sed.texi:3188
msgid "Useful one-liners:"
msgstr ""

#. type: section
#: sed.texi:3188 sed.texi:3213 sed.texi:3214
#, no-wrap
msgid "Joining lines"
msgstr ""

#. type: menuentry
#: sed.texi:3197
msgid "Some exotic examples:"
msgstr ""

#. type: menuentry
#: sed.texi:3197
msgid "Centering lines::"
msgstr ""

#. type: menuentry
#: sed.texi:3197
msgid "Increment a number::"
msgstr ""

#. type: menuentry
#: sed.texi:3197
msgid "Rename files to lower case::"
msgstr ""

#. type: menuentry
#: sed.texi:3197
msgid "Print bash environment::"
msgstr ""

#. type: menuentry
#: sed.texi:3197
msgid "Reverse chars of lines::"
msgstr ""

#. type: menuentry
#: sed.texi:3197
msgid "Text search across multiple lines::"
msgstr ""

#. type: section
#: sed.texi:3197 sed.texi:3742 sed.texi:3743
#, no-wrap
msgid "Line length adjustment"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Emulating standard utilities:"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:3834
#, no-wrap
msgid "tac"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Reverse lines of files"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:3868
#, no-wrap
msgid "cat -n"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Numbering lines"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:3961
#, no-wrap
msgid "cat -b"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Numbering non-blank lines"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:4006
#, no-wrap
msgid "wc -c"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Counting chars"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:4089
#, no-wrap
msgid "wc -w"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Counting words"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:4154
#, no-wrap
msgid "wc -l"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Counting lines"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:4169
#, no-wrap
msgid "head"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Printing the first lines"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:4185
#, no-wrap
msgid "tail"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Printing the last lines"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:4248
#, no-wrap
msgid "uniq"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Make duplicate lines unique"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:4291
#, no-wrap
msgid "uniq -d"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Print duplicated lines of input"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:4334
#, no-wrap
msgid "uniq -u"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Remove all duplicated lines"
msgstr ""

#. type: node
#: sed.texi:3211 sed.texi:4378
#, no-wrap
msgid "cat -s"
msgstr ""

#. type: menuentry
#: sed.texi:3211
msgid "Squeezing blank lines"
msgstr ""

#. type: Plain text
#: sed.texi:3217
msgid "Join specific lines (e.g. if lines 2 and 3 need to be joined):"
msgstr ""

#. type: example
#: sed.texi:3226
#, no-wrap
msgid ""
"$ cat lines.txt\n"
"hello\n"
"hel\n"
"lo\n"
"hello\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:3231
#, no-wrap
msgid ""
"$ sed '2@{N;s/\\n//;@}' lines.txt\n"
"hello\n"
"hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: sed.texi:3236
msgid "Join lines ending with backslashes:"
msgstr ""

#. type: example
#: sed.texi:3248
#, no-wrap
msgid ""
"$ cat 1.txt\n"
"this \\\n"
"is \\\n"
"a \\\n"
"long \\\n"
"line\n"
"and another \\\n"
"line\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:3252
#, no-wrap
msgid ""
"$ sed -e ':x /\\\\$/ @{ N; s/\\\\\\n//g ; bx @}'  1.txt\n"
"this is a long line\n"
"and another line\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:3256
#, no-wrap
msgid ""
"#TODO: The above requires gnu sed.\n"
"#      non-gnu seds need newlines after ':' and 'b'\n"
msgstr ""

#. type: node
#: sed.texi:3260
#, no-wrap
msgid "Centering lines"
msgstr ""

#. type: section
#: sed.texi:3261
#, no-wrap
msgid "Centering Lines"
msgstr ""

#. type: Plain text
#: sed.texi:3266
msgid ""
"This script centers all lines of a file on a 80 columns width.  To change "
"that width, the number in @code{\\@{@dots{}\\@}} must be replaced, and the "
"number of added spaces also must be changed."
msgstr ""

#. type: Plain text
#: sed.texi:3270
msgid ""
"Note how the buffer commands are used to separate parts in the regular "
"expressions to be matched---this is a common technique."
msgstr ""

#. type: example
#: sed.texi:3274 sed.texi:3332 sed.texi:3602 sed.texi:4231 sed.texi:4342 sed.texi:4391 sed.texi:4418
#, no-wrap
msgid ""
"#!/usr/bin/sed -f\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3283
#, no-wrap
msgid ""
"# Put 80 spaces in the buffer\n"
"1 @{\n"
"  x\n"
"  s/^$/          /\n"
"  s/^.*$/&&&&&&&&/\n"
"  x\n"
"@}\n"
msgstr ""

#. type: group
#: sed.texi:3290
#, no-wrap
msgid ""
"# delete leading and trailing spaces\n"
"y/@kbd{tab}/ /\n"
"s/^ *//\n"
"s/ *$//\n"
msgstr ""

#. type: group
#: sed.texi:3295
#, no-wrap
msgid ""
"# add a newline and 80 spaces to end of line\n"
"G\n"
msgstr ""

#. type: group
#: sed.texi:3300
#, no-wrap
msgid ""
"# keep first 81 chars (80 + a newline)\n"
"s/^\\(.\\@{81\\@}\\).*$/\\1/\n"
msgstr ""

#. type: group
#: sed.texi:3305
#, no-wrap
msgid ""
"# \\2 matches half of the spaces, which are moved to the beginning\n"
"s/^\\(.*\\)\\n\\(.*\\)\\2/\\2\\1/\n"
msgstr ""

#. type: node
#: sed.texi:3309
#, no-wrap
msgid "Increment a number"
msgstr ""

#. type: section
#: sed.texi:3310
#, no-wrap
msgid "Increment a Number"
msgstr ""

#. type: Plain text
#: sed.texi:3316
msgid ""
"This script is one of a few that demonstrate how to do arithmetic in "
"@command{sed}.  This is indeed possible,@footnote{@command{sed} guru Greg "
"Ubben wrote an implementation of the @command{dc} @sc{rpn} calculator! It is "
"distributed together with sed.} but must be done manually."
msgstr ""

#. type: Plain text
#: sed.texi:3321
msgid ""
"To increment one number you just add 1 to last digit, replacing it by the "
"following digit.  There is one exception: when the digit is a nine the "
"previous digits must be also incremented until you don't have a nine."
msgstr ""

#. type: Plain text
#: sed.texi:3328
msgid ""
"This solution by Bruno Haible is very clever and smart because it uses a "
"single buffer; if you don't have this limitation, the algorithm used in "
"@ref{cat -n, Numbering lines}, is faster.  It works by replacing trailing "
"nines with an underscore, then using multiple @code{s} commands to increment "
"the last digit, and then again substituting underscores with zeros."
msgstr ""

#. type: example
#: sed.texi:3334
#, no-wrap
msgid ""
"/[^0-9]/ d\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3341
#, no-wrap
msgid ""
"# replace all trailing 9s by _ (any other character except digits, could\n"
"# be used)\n"
":d\n"
"s/9\\(_*\\)$/_\\1/\n"
"td\n"
msgstr ""

#. type: group
#: sed.texi:3346
#, no-wrap
msgid ""
"# incr last digit only.  The first line adds a most-significant\n"
"# digit of 1 if we have to add a digit.\n"
msgstr ""

#. type: group
#: sed.texi:3359
#, no-wrap
msgid ""
"s/^\\(_*\\)$/1\\1/; tn\n"
"s/8\\(_*\\)$/9\\1/; tn\n"
"s/7\\(_*\\)$/8\\1/; tn\n"
"s/6\\(_*\\)$/7\\1/; tn\n"
"s/5\\(_*\\)$/6\\1/; tn\n"
"s/4\\(_*\\)$/5\\1/; tn\n"
"s/3\\(_*\\)$/4\\1/; tn\n"
"s/2\\(_*\\)$/3\\1/; tn\n"
"s/1\\(_*\\)$/2\\1/; tn\n"
"s/0\\(_*\\)$/1\\1/; tn\n"
msgstr ""

#. type: group
#: sed.texi:3364
#, no-wrap
msgid ""
":n\n"
"y/_/0/\n"
msgstr ""

#. type: node
#: sed.texi:3368
#, no-wrap
msgid "Rename files to lower case"
msgstr ""

#. type: section
#: sed.texi:3369
#, no-wrap
msgid "Rename Files to Lower Case"
msgstr ""

#. type: Plain text
#: sed.texi:3376
msgid ""
"This is a pretty strange use of @command{sed}.  We transform text, and "
"transform it to be shell commands, then just feed them to shell.  Don't "
"worry, even worse hacks are done when using @command{sed}; I have seen a "
"script converting the output of @command{date} into a @command{bc} program!"
msgstr ""

#. type: Plain text
#: sed.texi:3382
msgid ""
"The main body of this is the @command{sed} script, which remaps the name "
"from lower to upper (or vice-versa) and even checks out if the remapped name "
"is the same as the original name.  Note how the script is parameterized "
"using shell variables and proper quoting."
msgstr ""

#. type: group
#: sed.texi:3396
#, no-wrap
msgid ""
"#! /bin/sh\n"
"# rename files to lower/upper case...\n"
"#\n"
"# usage:\n"
"#    move-to-lower *\n"
"#    move-to-upper *\n"
"# or\n"
"#    move-to-lower -R .\n"
"#    move-to-upper -R .\n"
"#\n"
msgstr ""

#. type: group
#: sed.texi:3403
#, no-wrap
msgid ""
"help()\n"
"@{\n"
"        cat << eof\n"
"Usage: $0 [-n] [-r] [-h] files...\n"
msgstr ""

#. type: group
#: sed.texi:3410
#, no-wrap
msgid ""
"-n      do nothing, only see what would be done\n"
"-R      recursive (use find)\n"
"-h      this message\n"
"files   files to remap to lower case\n"
msgstr ""

#. type: group
#: sed.texi:3416
#, no-wrap
msgid ""
"Examples:\n"
"       $0 -n *        (see if everything is ok, then...)\n"
"       $0 *\n"
msgstr ""

#. type: example
#: sed.texi:3419
#, no-wrap
msgid ""
"       $0 -R .\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3423
#, no-wrap
msgid ""
"eof\n"
"@}\n"
msgstr ""

#. type: group
#: sed.texi:3429
#, no-wrap
msgid ""
"apply_cmd='sh'\n"
"finder='echo \"$@@\" | tr \" \" \"\\n\"'\n"
"files_only=\n"
msgstr ""

#. type: group
#: sed.texi:3442
#, no-wrap
msgid ""
"while :\n"
"do\n"
"    case \"$1\" in\n"
"        -n) apply_cmd='cat' ;;\n"
"        -R) finder='find \"$@@\" -type f';;\n"
"        -h) help ; exit 1 ;;\n"
"        *) break ;;\n"
"    esac\n"
"    shift\n"
"done\n"
msgstr ""

#. type: group
#: sed.texi:3449
#, no-wrap
msgid ""
"if [ -z \"$1\" ]; then\n"
"        echo Usage: $0 [-h] [-n] [-r] files...\n"
"        exit 1\n"
"fi\n"
msgstr ""

#. type: group
#: sed.texi:3454
#, no-wrap
msgid ""
"LOWER='abcdefghijklmnopqrstuvwxyz'\n"
"UPPER='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n"
msgstr ""

#. type: group
#: sed.texi:3461
#, no-wrap
msgid ""
"case `basename $0` in\n"
"        *upper*) TO=$UPPER; FROM=$LOWER ;;\n"
"        *)       FROM=$UPPER; TO=$LOWER ;;\n"
"esac\n"
msgstr ""

#. type: example
#: sed.texi:3464
#, no-wrap
msgid ""
"eval $finder | sed -n '\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3468
#, no-wrap
msgid ""
"# remove all trailing slashes\n"
"s/\\/*$//\n"
msgstr ""

#. type: group
#: sed.texi:3473
#, no-wrap
msgid ""
"# add ./ if there is no path, only a filename\n"
"/\\//! s/^/.\\//\n"
msgstr ""

#. type: group
#: sed.texi:3478
#, no-wrap
msgid ""
"# save path+filename\n"
"h\n"
msgstr ""

#. type: group
#: sed.texi:3483
#, no-wrap
msgid ""
"# remove path\n"
"s/.*\\///\n"
msgstr ""

#. type: group
#: sed.texi:3488
#, no-wrap
msgid ""
"# do conversion only on filename\n"
"y/'$FROM'/'$TO'/\n"
msgstr ""

#. type: group
#: sed.texi:3494
#, no-wrap
msgid ""
"# now line contains original path+file, while\n"
"# hold space contains the new filename\n"
"x\n"
msgstr ""

#. type: group
#: sed.texi:3500
#, no-wrap
msgid ""
"# add converted file name to line, which now contains\n"
"# path/file-name\\nconverted-file-name\n"
"G\n"
msgstr ""

#. type: group
#: sed.texi:3506
#, no-wrap
msgid ""
"# check if converted file name is equal to original file name,\n"
"# if it is, do not print anything\n"
"/^.*\\/\\(.*\\)\\n\\1/b\n"
msgstr ""

#. type: group
#: sed.texi:3511
#, no-wrap
msgid ""
"# escape special characters for the shell\n"
"s/[\"$`\\\\]/\\\\&/g\n"
msgstr ""

#. type: group
#: sed.texi:3517
#, no-wrap
msgid ""
"# now, transform path/fromfile\\n, into\n"
"# mv path/fromfile path/tofile and print it\n"
"s/^\\(.*\\/\\)\\(.*\\)\\n\\(.*\\)$/mv \"\\1\\2\" \"\\1\\3\"/p\n"
msgstr ""

#. type: example
#: sed.texi:3520
#, no-wrap
msgid "' | $apply_cmd\n"
msgstr ""

#. type: node
#: sed.texi:3523
#, no-wrap
msgid "Print bash environment"
msgstr ""

#. type: section
#: sed.texi:3524
#, no-wrap
msgid "Print @command{bash} Environment"
msgstr ""

#. type: Plain text
#: sed.texi:3528
msgid ""
"This script strips the definition of the shell functions from the output of "
"the @command{set} Bourne-shell command."
msgstr ""

#. type: example
#: sed.texi:3532
#, no-wrap
msgid ""
"#!/bin/sh\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3536
#, no-wrap
msgid ""
"set | sed -n '\n"
":x\n"
msgstr ""

#. type: ifinfo
#: sed.texi:3541
#, no-wrap
msgid "# if no occurrence of \"=()\" print and load next line\n"
msgstr ""

#. type: ifnotinfo
#: sed.texi:3544
#, no-wrap
msgid "# if no occurrence of @samp{=()} print and load next line\n"
msgstr ""

#. type: group
#: sed.texi:3547
#, no-wrap
msgid ""
"/=()/! @{ p; b; @}\n"
"/ () $/! @{ p; b; @}\n"
msgstr ""

#. type: group
#: sed.texi:3553
#, no-wrap
msgid ""
"# possible start of functions section\n"
"# save the line in case this is a var like FOO=\"() \"\n"
"h\n"
msgstr ""

#. type: group
#: sed.texi:3560
#, no-wrap
msgid ""
"# if the next line has a brace, we quit because\n"
"# nothing comes after functions\n"
"n\n"
"/^@{/ q\n"
msgstr ""

#. type: group
#: sed.texi:3565
#, no-wrap
msgid ""
"# print the old line\n"
"x; p\n"
msgstr ""

#. type: group
#: sed.texi:3571
#, no-wrap
msgid ""
"# work on the new line now\n"
"x; bx\n"
"'\n"
msgstr ""

#. type: node
#: sed.texi:3575
#, no-wrap
msgid "Reverse chars of lines"
msgstr ""

#. type: section
#: sed.texi:3576
#, no-wrap
msgid "Reverse Characters of Lines"
msgstr ""

#. type: Plain text
#: sed.texi:3581
msgid ""
"This script can be used to reverse the position of characters in lines.  The "
"technique moves two characters at a time, hence it is faster than more "
"intuitive implementations."
msgstr ""

#. type: Plain text
#: sed.texi:3585
msgid ""
"Note the @code{tx} command before the definition of the label.  This is "
"often needed to reset the flag that is tested by the @code{t} command."
msgstr ""

#. type: Plain text
#: sed.texi:3598
msgid ""
"Imaginative readers will find uses for this script.  An example is reversing "
"the output of @command{banner}.@footnote{This requires another script to pad "
"the output of banner; for example @example #! /bin/sh banner -w $1 $2 $3 $4 "
"| sed -e :a -e '/^.\\@{0,'$1'\\@}$/ @{ s/$/ /; ba; @}' | "
"~/sedscripts/reverseline.sed @end example }"
msgstr ""

#. type: example
#: sed.texi:3604
#, no-wrap
msgid ""
"/../! b\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3610
#, no-wrap
msgid ""
"# Reverse a line.  Begin embedding the line between two newlines\n"
"s/^.*$/\\\n"
"&\\\n"
"/\n"
msgstr ""

#. type: group
#: sed.texi:3619
#, no-wrap
msgid ""
"# Move first character at the end.  The regexp matches until\n"
"# there are zero or one characters between the markers\n"
"tx\n"
":x\n"
"s/\\(\\n.\\)\\(.*\\)\\(.\\n\\)/\\3\\2\\1/\n"
"tx\n"
msgstr ""

#. type: group
#: sed.texi:3624
#, no-wrap
msgid ""
"# Remove the newline markers\n"
"s/\\n//g\n"
msgstr ""

#. type: section
#: sed.texi:3629 sed.texi:3630
#, no-wrap
msgid "Text search across multiple lines"
msgstr ""

#. type: Plain text
#: sed.texi:3634
msgid ""
"This section uses @code{N} and @code{D} commands to search for consecutive "
"words spanning multiple lines. @xref{Multiline techniques}."
msgstr ""

#. type: Plain text
#: sed.texi:3636
msgid "These examples deal with finding doubled occurrences of words in a document."
msgstr ""

#. type: Plain text
#: sed.texi:3639
msgid ""
"Finding doubled words in a single line is easy using GNU @command{grep} and "
"similarly with @value{SSED}:"
msgstr ""

#. type: group
#: sed.texi:3651
#, no-wrap
msgid ""
"$ cat two-cities-dup1.txt\n"
"It was the best of times,\n"
"it was the worst of times,\n"
"it was the@ the age of wisdom,\n"
"it was the age of foolishness,\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3654
#, no-wrap
msgid ""
"$ grep -E '\\b(\\w+)\\s+\\1\\b' two-cities-dup1.txt\n"
"it was the@ the age of wisdom,\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3657
#, no-wrap
msgid ""
"$ grep -n -E '\\b(\\w+)\\s+\\1\\b' two-cities-dup1.txt\n"
"3:it was the@ the age of wisdom,\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3660
#, no-wrap
msgid ""
"$ sed -En '/\\b(\\w+)\\s+\\1\\b/p' two-cities-dup1.txt\n"
"it was the@ the age of wisdom,\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3664
#, no-wrap
msgid ""
"$ sed -En '/\\b(\\w+)\\s+\\1\\b/@{=;p@}' two-cities-dup1.txt\n"
"3\n"
"it was the@ the age of wisdom,\n"
msgstr ""

#. type: itemize
#: sed.texi:3674
msgid ""
"The regular expression @samp{\\b\\w+\\s+} searches for word-boundary "
"(@samp{\\b}), followed by one-or-more word-characters (@samp{\\w+}), "
"followed by whitespace (@samp{\\s+}). @xref{regexp extensions}."
msgstr ""

#. type: itemize
#: sed.texi:3681
msgid ""
"Adding parentheses around the @samp{(\\w+)} expression creates a "
"subexpression.  The regular expression pattern @samp{(PATTERN)\\s+\\1} "
"defines a subexpression (in the parentheses) followed by a back-reference, "
"separated by whitespace.  A successful match means the @var{PATTERN} was "
"repeated twice in succession.  @xref{Back-references and Subexpressions}."
msgstr ""

#. type: itemize
#: sed.texi:3687
msgid ""
"The word-boundery expression (@samp{\\b}) at both ends ensures partial words "
"are not matched (e.g. @samp{the then} is not a desired match)."
msgstr ""

#. type: itemize
#: sed.texi:3691
msgid ""
"The @option{-E} option enables extended regular expression syntax, "
"alleviating the need to add backslashes before the parenthesis. @xref{ERE "
"syntax}."
msgstr ""

#. type: Plain text
#: sed.texi:3696
msgid ""
"When the doubled word span two lines the above regular expression will not "
"find them as @command{grep} and @command{sed} operate line-by-line."
msgstr ""

#. type: Plain text
#: sed.texi:3700
msgid ""
"By using @command{N} and @command{D} commands, @command{sed} can apply "
"regular expressions on multiple lines (that is, multiple lines are stored in "
"the pattern space, and the regular expression works on it):"
msgstr ""

#. type: example
#: sed.texi:3710
#, no-wrap
msgid ""
"$ cat two-cities-dup2.txt\n"
"It was the best of times, it was the\n"
"worst of times, it was the@*the age of wisdom,\n"
"it was the age of foolishness,\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:3714
#, no-wrap
msgid ""
"$ sed -En '@{N; /\\b(\\w+)\\s+\\1\\b/@{=;p@} ; D@}'  two-cities-dup2.txt\n"
"3\n"
"worst of times, it was the@*the age of wisdom,\n"
msgstr ""

#. type: itemize
#: sed.texi:3722
msgid ""
"The @command{N} command appends the next line to the pattern space (thus "
"ensuring it contains two consecutive lines in every cycle)."
msgstr ""

#. type: itemize
#: sed.texi:3726
msgid ""
"The regular expression uses @samp{\\s+} for word separator which matches "
"both spaces and newlines."
msgstr ""

#. type: itemize
#: sed.texi:3730
msgid ""
"The regular expression matches, the entire pattern space is printed with "
"@command{p}. No lines are printed by default due to the @option{-n} option."
msgstr ""

#. type: itemize
#: sed.texi:3734
msgid ""
"The @command{D} removes the first line from the pattern space (up until the "
"first newline), readying it for the next cycle."
msgstr ""

#. type: Plain text
#: sed.texi:3741
msgid ""
"See the GNU @command{coreutils} manual for an alternative solution using "
"@command{tr -s} and @command{uniq} at "
"@url{https://gnu.org/s/coreutils/manual/html_node/Squeezing-and-deleting.html}."
msgstr ""

#. type: Plain text
#: sed.texi:3749
msgid ""
"This section uses @code{N} and @code{D} commands to search for consecutive "
"words spanning multiple lines, and the @code{b} command for branching.  "
"@xref{Multiline techniques} and @ref{Branching and flow control}."
msgstr ""

#. type: Plain text
#: sed.texi:3752
msgid ""
"These (somewhat contrived) examples deal with formatting and wrapping lines "
"of text of the following input file:"
msgstr ""

#. type: group
#: sed.texi:3764
#, no-wrap
msgid ""
"$ cat two-cities-mix.txt\n"
"It was the best of times, it was\n"
"the worst of times, it\n"
"was the age of\n"
"wisdom,\n"
"it\n"
"was\n"
"the age\n"
"of foolishness,\n"
msgstr ""

#. type: Plain text
#: sed.texi:3770
msgid ""
"The following command will wrap lines at 40 characters: @codequoteundirected "
"on @codequotebacktick on"
msgstr ""

#. type: group
#: sed.texi:3777
#, no-wrap
msgid ""
"$ sed -E ':x @{N ; s/\\n/ /g ; s/(.@{40,40@})/\\1\\n/ ; /\\n/!bx ; P ; D@}' "
"\\\n"
"      two-cities-mix.txt\n"
"It was the best of times, it was the wor\n"
"st of times, it was the age of wisdom, i\n"
"t was the age of foolishness,\n"
msgstr ""

#. type: Plain text
#: sed.texi:3785
msgid ""
"The following command will split lines by comma character: "
"@codequoteundirected on @codequotebacktick on"
msgstr ""

#. type: group
#: sed.texi:3793
#, no-wrap
msgid ""
"$ sed -E ':x @{N ; s/\\n/ /g ; s/,/,\\n/ ; /\\n/!bx ; s/^ *// ; P ; D@}' "
"\\\n"
"      two-cities-mix.txt\n"
"It was the best of times,\n"
"it was the worst of times,\n"
"it was the age of wisdom,\n"
"it was the age of foolishness,\n"
msgstr ""

#. type: Plain text
#: sed.texi:3799
msgid "Both examples use similar construct:"
msgstr ""

#. type: itemize
#: sed.texi:3806
msgid ""
"The @samp{:x} is a label. It will be used later by the @command{b} command "
"to jump to the beginning of the @command{sed} program without starting a new "
"cycle."
msgstr ""

#. type: itemize
#: sed.texi:3810
msgid ""
"The @samp{N} command reads the next line from the input file, and appends it "
"to the existing content of the pattern space (with a newline preceding it)."
msgstr ""

#. type: itemize
#: sed.texi:3814
msgid ""
"The first @samp{s/\\n/ /g} command replaces all newlines with spaces, "
"discarding the line structure of the input file."
msgstr ""

#. type: itemize
#: sed.texi:3819
msgid ""
"The second @samp{s///} command adds newlines based on the desired pattern "
"(after 40 characters in the first example, after comma character in the "
"second example)."
msgstr ""

#. type: itemize
#: sed.texi:3825
msgid ""
"The @samp{/\\n/!bx} command searches for a newline in the pattern space "
"(@samp{/n/}), and if it is @emph{not} found (@samp{!}), branches (=jumps)  "
"to the previously defined label @samp{x}. This will cause @command{sed} to "
"read the next line without processing any further commands in this cycle."
msgstr ""

#. type: itemize
#: sed.texi:3830
msgid ""
"If a newline is found in the pattern space, @command{P} is used to print up "
"to the newline (that is - the newly structured line) then @command{D} "
"deletes the pattern space up to the newline, and starts a new cycle."
msgstr ""

#. type: section
#: sed.texi:3835
#, no-wrap
msgid "Reverse Lines of Files"
msgstr ""

#. type: Plain text
#: sed.texi:3840
msgid ""
"This one begins a series of totally useless (yet interesting)  scripts "
"emulating various Unix commands.  This, in particular, is a @command{tac} "
"workalike."
msgstr ""

#. type: Plain text
#: sed.texi:3843
msgid ""
"Note that on implementations other than @acronym{GNU} @command{sed} this "
"script might easily overflow internal buffers."
msgstr ""

#. type: example
#: sed.texi:3847 sed.texi:3907 sed.texi:3974 sed.texi:4033 sed.texi:4108 sed.texi:4198 sed.texi:4299 sed.texi:4447
#, no-wrap
msgid ""
"#!/usr/bin/sed -nf\n"
"\n"
msgstr ""

#. type: example
#: sed.texi:3849
#, no-wrap
msgid ""
"# reverse all lines of input, i.e. first line became last, ...\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:3854
#, no-wrap
msgid ""
"# from the second line, the buffer (which contains all previous lines)\n"
"# is *appended* to current line, so, the order will be reversed\n"
"1! G\n"
msgstr ""

#. type: group
#: sed.texi:3859
#, no-wrap
msgid ""
"# on the last line we're done -- print everything\n"
"$ p\n"
msgstr ""

#. type: group
#: sed.texi:3864
#, no-wrap
msgid ""
"# store everything on the buffer again\n"
"h\n"
msgstr ""

#. type: section
#: sed.texi:3869
#, no-wrap
msgid "Numbering Lines"
msgstr ""

#. type: Plain text
#: sed.texi:3873
msgid ""
"This script replaces @samp{cat -n}; in fact it formats its output exactly "
"like @acronym{GNU} @command{cat} does."
msgstr ""

#. type: Plain text
#: sed.texi:3878
msgid ""
"Of course this is completely useless and for two reasons: first, because "
"somebody else did it in C, second, because the following Bourne-shell script "
"could be used for the same purpose and would be much faster:"
msgstr ""

#. type: group
#: sed.texi:3888
#, no-wrap
msgid ""
"#! /bin/sh\n"
"sed -e \"=\" $@@ | sed -e '\n"
"  s/^/      /\n"
"  N\n"
"  s/^ *\\(......\\)\\n/\\1  /\n"
"'\n"
msgstr ""

#. type: Plain text
#: sed.texi:3895
msgid ""
"It uses @command{sed} to print the line number, then groups lines two by two "
"using @code{N}.  Of course, this script does not teach as much as the one "
"presented below."
msgstr ""

#. type: Plain text
#: sed.texi:3903
msgid ""
"The algorithm used for incrementing uses both buffers, so the line is "
"printed as soon as possible and then discarded.  The number is split so that "
"changing digits go in a buffer and unchanged ones go in the other; the "
"changed digits are modified in a single step (using a @code{y} command).  "
"The line number for the next line is then composed and stored in the hold "
"space, to be used in the next iteration."
msgstr ""

#. type: group
#: sed.texi:3912
#, no-wrap
msgid ""
"# Prime the pump on the first line\n"
"x\n"
"/^$/ s/^.*$/1/\n"
msgstr ""

#. type: group
#: sed.texi:3918
#, no-wrap
msgid ""
"# Add the correct line number before the pattern\n"
"G\n"
"h\n"
msgstr ""

#. type: group
#: sed.texi:3924
#, no-wrap
msgid ""
"# Format it and print it\n"
"s/^/      /\n"
"s/^ *\\(......\\)\\n/\\1  /p\n"
msgstr ""

#. type: group
#: sed.texi:3932
#, no-wrap
msgid ""
"# Get the line number from hold space; add a zero\n"
"# if we're going to add a digit on the next line\n"
"g\n"
"s/\\n.*$//\n"
"/^9*$/ s/^/0/\n"
msgstr ""

#. type: group
#: sed.texi:3937
#, no-wrap
msgid ""
"# separate changing/unchanged digits with an x\n"
"s/.9*$/x&/\n"
msgstr ""

#. type: group
#: sed.texi:3945
#, no-wrap
msgid ""
"# keep changing digits in hold space\n"
"h\n"
"s/^.*x//\n"
"y/0123456789/1234567890/\n"
"x\n"
msgstr ""

#. type: group
#: sed.texi:3950
#, no-wrap
msgid ""
"# keep unchanged digits in pattern space\n"
"s/x.*$//\n"
msgstr ""

#. type: group
#: sed.texi:3957
#, no-wrap
msgid ""
"# compose the new number, remove the newline implicitly added by G\n"
"G\n"
"s/\\n//\n"
"h\n"
msgstr ""

#. type: section
#: sed.texi:3962
#, no-wrap
msgid "Numbering Non-blank Lines"
msgstr ""

#. type: Plain text
#: sed.texi:3966
msgid ""
"Emulating @samp{cat -b} is almost the same as @samp{cat -n}---we only have "
"to select which lines are to be numbered and which are not."
msgstr ""

#. type: Plain text
#: sed.texi:3970
msgid ""
"The part that is common to this script and the previous one is not commented "
"to show how important it is to comment @command{sed} scripts properly..."
msgstr ""

#. type: group
#: sed.texi:3980
#, no-wrap
msgid ""
"/^$/ @{\n"
"  p\n"
"  b\n"
"@}\n"
msgstr ""

#. type: group
#: sed.texi:4002
#, no-wrap
msgid ""
"# Same as cat -n from now\n"
"x\n"
"/^$/ s/^.*$/1/\n"
"G\n"
"h\n"
"s/^/      /\n"
"s/^ *\\(......\\)\\n/\\1  /p\n"
"x\n"
"s/\\n.*$//\n"
"/^9*$/ s/^/0/\n"
"s/.9*$/x&/\n"
"h\n"
"s/^.*x//\n"
"y/0123456789/1234567890/\n"
"x\n"
"s/x.*$//\n"
"G\n"
"s/\\n//\n"
"h\n"
msgstr ""

#. type: section
#: sed.texi:4007
#, no-wrap
msgid "Counting Characters"
msgstr ""

#. type: Plain text
#: sed.texi:4013
msgid ""
"This script shows another way to do arithmetic with @command{sed}.  In this "
"case we have to add possibly large numbers, so implementing this by "
"successive increments would not be feasible (and possibly even more "
"complicated to contrive than this script)."
msgstr ""

#. type: Plain text
#: sed.texi:4019
msgid ""
"The approach is to map numbers to letters, kind of an abacus implemented "
"with @command{sed}.  @samp{a}s are units, @samp{b}s are tens and so on: we "
"simply add the number of characters on the current line as units, and then "
"propagate the carry to tens, hundreds, and so on."
msgstr ""

#. type: Plain text
#: sed.texi:4021
msgid "As usual, running totals are kept in hold space."
msgstr ""

#. type: Plain text
#: sed.texi:4029
msgid ""
"On the last line, we convert the abacus form back to decimal.  For the sake "
"of variety, this is done with a loop rather than with some 80 @code{s} "
"commands@footnote{Some implementations have a limit of 199 commands per "
"script}: first we convert units, removing @samp{a}s from the number; then we "
"rotate letters so that tens become @samp{a}s, and so on until no more "
"letters remain."
msgstr ""

#. type: group
#: sed.texi:4040
#, no-wrap
msgid ""
"# Add n+1 a's to hold space (+1 is for the newline)\n"
"s/./a/g\n"
"H\n"
"x\n"
"s/\\n/a/\n"
msgstr ""

#. type: group
#: sed.texi:4054
#, no-wrap
msgid ""
"# Do the carry.  The t's and b's are not necessary,\n"
"# but they do speed up the thing\n"
"t a\n"
": a;  s/aaaaaaaaaa/b/g; t b; b done\n"
": b;  s/bbbbbbbbbb/c/g; t c; b done\n"
": c;  s/cccccccccc/d/g; t d; b done\n"
": d;  s/dddddddddd/e/g; t e; b done\n"
": e;  s/eeeeeeeeee/f/g; t f; b done\n"
": f;  s/ffffffffff/g/g; t g; b done\n"
": g;  s/gggggggggg/h/g; t h; b done\n"
": h;  s/hhhhhhhhhh//g\n"
msgstr ""

#. type: group
#: sed.texi:4062
#, no-wrap
msgid ""
": done\n"
"$! @{\n"
"  h\n"
"  b\n"
"@}\n"
msgstr ""

#. type: example
#: sed.texi:4065
#, no-wrap
msgid ""
"# On the last line, convert back to decimal\n"
"\n"
msgstr ""

#. type: group
#: sed.texi:4078
#, no-wrap
msgid ""
": loop\n"
"/a/! s/[b-h]*/&0/\n"
"s/aaaaaaaaa/9/\n"
"s/aaaaaaaa/8/\n"
"s/aaaaaaa/7/\n"
"s/aaaaaa/6/\n"
"s/aaaaa/5/\n"
"s/aaaa/4/\n"
"s/aaa/3/\n"
"s/aa/2/\n"
"s/a/1/\n"
msgstr ""

#. type: group
#: sed.texi:4085
#, no-wrap
msgid ""
": next\n"
"y/bcdefgh/abcdefg/\n"
"/[a-h]/ b loop\n"
"p\n"
msgstr ""

#. type: section
#: sed.texi:4090
#, no-wrap
msgid "Counting Words"
msgstr ""

#. type: Plain text
#: sed.texi:4095
msgid ""
"This script is almost the same as the previous one, once each of the words "
"on the line is converted to a single @samp{a} (in the previous script each "
"letter was changed to an @samp{a})."
msgstr ""

#. type: Plain text
#: sed.texi:4101
msgid ""
"It is interesting that real @command{wc} programs have optimized loops for "
"@samp{wc -c}, so they are much slower at counting words rather than "
"characters.  This script's bottleneck, instead, is arithmetic, and hence the "
"word-counting one is faster (it has to manage smaller numbers)."
msgstr ""

#. type: Plain text
#: sed.texi:4104
msgid ""
"Again, the common parts are not commented to show the importance of "
"commenting @command{sed} scripts."
msgstr ""

#. type: group
#: sed.texi:4115
#, no-wrap
msgid ""
"# Convert words to a's\n"
"s/[ @kbd{tab}][ @kbd{tab}]*/ /g\n"
"s/^/ /\n"
"s/ [^ ][^ ]*/a /g\n"
"s/ //g\n"
msgstr ""

#. type: group
#: sed.texi:4122
#, no-wrap
msgid ""
"# Append them to hold space\n"
"H\n"
"x\n"
"s/\\n//\n"
msgstr ""

#. type: group
#: sed.texi:4150
#, no-wrap
msgid ""
"# From here on it is the same as in wc -c.\n"
"/aaaaaaaaaa/! bx;   s/aaaaaaaaaa/b/g\n"
"/bbbbbbbbbb/! bx;   s/bbbbbbbbbb/c/g\n"
"/cccccccccc/! bx;   s/cccccccccc/d/g\n"
"/dddddddddd/! bx;   s/dddddddddd/e/g\n"
"/eeeeeeeeee/! bx;   s/eeeeeeeeee/f/g\n"
"/ffffffffff/! bx;   s/ffffffffff/g/g\n"
"/gggggggggg/! bx;   s/gggggggggg/h/g\n"
"s/hhhhhhhhhh//g\n"
":x\n"
"$! @{ h; b; @}\n"
":y\n"
"/a/! s/[b-h]*/&0/\n"
"s/aaaaaaaaa/9/\n"
"s/aaaaaaaa/8/\n"
"s/aaaaaaa/7/\n"
"s/aaaaaa/6/\n"
"s/aaaaa/5/\n"
"s/aaaa/4/\n"
"s/aaa/3/\n"
"s/aa/2/\n"
"s/a/1/\n"
"y/bcdefgh/abcdefg/\n"
"/[a-h]/ by\n"
"p\n"
msgstr ""

#. type: section
#: sed.texi:4155
#, no-wrap
msgid "Counting Lines"
msgstr ""

#. type: Plain text
#: sed.texi:4159
msgid ""
"No strange things are done now, because @command{sed} gives us @samp{wc -l} "
"functionality for free!!! Look:"
msgstr ""

#. type: group
#: sed.texi:4165
#, no-wrap
msgid ""
"#!/usr/bin/sed -nf\n"
"$=\n"
msgstr ""

#. type: section
#: sed.texi:4170
#, no-wrap
msgid "Printing the First Lines"
msgstr ""

#. type: Plain text
#: sed.texi:4175
msgid ""
"This script is probably the simplest useful @command{sed} script.  It "
"displays the first 10 lines of input; the number of displayed lines is right "
"before the @code{q} command."
msgstr ""

#. type: group
#: sed.texi:4181
#, no-wrap
msgid ""
"#!/usr/bin/sed -f\n"
"10q\n"
msgstr ""

#. type: section
#: sed.texi:4186
#, no-wrap
msgid "Printing the Last Lines"
msgstr ""

#. type: Plain text
#: sed.texi:4191
msgid ""
"Printing the last @var{n} lines rather than the first is more complex but "
"indeed possible.  @var{n} is encoded in the second line, before the bang "
"character."
msgstr ""

#. type: Plain text
#: sed.texi:4194
msgid ""
"This script is similar to the @command{tac} script in that it keeps the "
"final output in the hold space and prints it at the end:"
msgstr ""

#. type: group
#: sed.texi:4204
#, no-wrap
msgid ""
"1! @{; H; g; @}\n"
"1,10 !s/[^\\n]*\\n//\n"
"$p\n"
"h\n"
msgstr ""

#. type: Plain text
#: sed.texi:4212
msgid ""
"Mainly, the scripts keeps a window of 10 lines and slides it by adding a "
"line and deleting the oldest (the substitution command on the second line "
"works like a @code{D} command but does not restart the loop)."
msgstr ""

#. type: Plain text
#: sed.texi:4216
msgid ""
"The ``sliding window'' technique is a very powerful way to write efficient "
"and complex @command{sed} scripts, because commands like @code{P} would "
"require a lot of work if implemented manually."
msgstr ""

#. type: Plain text
#: sed.texi:4221
msgid ""
"To introduce the technique, which is fully demonstrated in the rest of this "
"chapter and is based on the @code{N}, @code{P} and @code{D} commands, here "
"is an implementation of @command{tail} using a simple ``sliding window.''"
msgstr ""

#. type: Plain text
#: sed.texi:4227
msgid ""
"This looks complicated but in fact the working is the same as the last "
"script: after we have kicked in the appropriate number of lines, however, we "
"stop using the hold space to keep inter-line state, and instead use @code{N} "
"and @code{D} to slide pattern space by one line:"
msgstr ""

#. type: group
#: sed.texi:4239
#, no-wrap
msgid ""
"1h\n"
"2,10 @{; H; g; @}\n"
"$q\n"
"1,9d\n"
"N\n"
"D\n"
msgstr ""

#. type: Plain text
#: sed.texi:4247
msgid ""
"Note how the first, second and fourth line are inactive after the first ten "
"lines of input.  After that, all the script does is: exiting on the last "
"line of input, appending the next input line to pattern space, and removing "
"the first line."
msgstr ""

#. type: section
#: sed.texi:4249
#, no-wrap
msgid "Make Duplicate Lines Unique"
msgstr ""

#. type: Plain text
#: sed.texi:4253
msgid ""
"This is an example of the art of using the @code{N}, @code{P} and @code{D} "
"commands, probably the most difficult to master."
msgstr ""

#. type: group
#: sed.texi:4259
#, no-wrap
msgid ""
"#!/usr/bin/sed -f\n"
"h\n"
msgstr ""

#. type: group
#: sed.texi:4272
#, no-wrap
msgid ""
":b\n"
"# On the last line, print and exit\n"
"$b\n"
"N\n"
"/^\\(.*\\)\\n\\1$/ @{\n"
"    # The two lines are identical.  Undo the effect of\n"
"    # the n command.\n"
"    g\n"
"    bb\n"
"@}\n"
msgstr ""

#. type: group
#: sed.texi:4277
#, no-wrap
msgid ""
"# If the @code{N} command had added the last line, print and exit\n"
"$b\n"
msgstr ""

#. type: group
#: sed.texi:4284
#, no-wrap
msgid ""
"# The lines are different; print the first and go\n"
"# back working on the second.\n"
"P\n"
"D\n"
msgstr ""

#. type: Plain text
#: sed.texi:4290
msgid ""
"As you can see, we maintain a 2-line window using @code{P} and @code{D}.  "
"This technique is often used in advanced @command{sed} scripts."
msgstr ""

#. type: section
#: sed.texi:4292
#, no-wrap
msgid "Print Duplicated Lines of Input"
msgstr ""

#. type: Plain text
#: sed.texi:4295
msgid "This script prints only duplicated lines, like @samp{uniq -d}."
msgstr ""

#. type: group
#: sed.texi:4307
#, no-wrap
msgid ""
"$b\n"
"N\n"
"/^\\(.*\\)\\n\\1$/ @{\n"
"    # Print the first of the duplicated lines\n"
"    s/.*\\n//\n"
"    p\n"
msgstr ""

#. type: group
#: sed.texi:4319
#, no-wrap
msgid ""
"    # Loop until we get a different line\n"
"    :b\n"
"    $b\n"
"    N\n"
"    /^\\(.*\\)\\n\\1$/ @{\n"
"        s/.*\\n//\n"
"        bb\n"
"    @}\n"
"@}\n"
msgstr ""

#. type: group
#: sed.texi:4324
#, no-wrap
msgid ""
"# The last line cannot be followed by duplicates\n"
"$b\n"
msgstr ""

#. type: group
#: sed.texi:4330
#, no-wrap
msgid ""
"# Found a different one.  Leave it alone in the pattern space\n"
"# and go back to the top, hunting its duplicates\n"
"D\n"
msgstr ""

#. type: section
#: sed.texi:4335
#, no-wrap
msgid "Remove All Duplicated Lines"
msgstr ""

#. type: Plain text
#: sed.texi:4338
msgid "This script prints only unique lines, like @samp{uniq -u}."
msgstr ""

#. type: group
#: sed.texi:4351
#, no-wrap
msgid ""
"# Search for a duplicate line --- until that, print what you find.\n"
"$b\n"
"N\n"
"/^\\(.*\\)\\n\\1$/ ! @{\n"
"    P\n"
"    D\n"
"@}\n"
msgstr ""

#. type: group
#: sed.texi:4358
#, no-wrap
msgid ""
":c\n"
"# Got two equal lines in pattern space.  At the\n"
"# end of the file we simply exit\n"
"$d\n"
msgstr ""

#. type: group
#: sed.texi:4368
#, no-wrap
msgid ""
"# Else, we keep reading lines with @code{N} until we\n"
"# find a different one\n"
"s/.*\\n//\n"
"N\n"
"/^\\(.*\\)\\n\\1$/ @{\n"
"    bc\n"
"@}\n"
msgstr ""

#. type: group
#: sed.texi:4374
#, no-wrap
msgid ""
"# Remove the last instance of the duplicate line\n"
"# and go back to the top\n"
"D\n"
msgstr ""

#. type: section
#: sed.texi:4379
#, no-wrap
msgid "Squeezing Blank Lines"
msgstr ""

#. type: Plain text
#: sed.texi:4384
msgid ""
"As a final example, here are three scripts, of increasing complexity and "
"speed, that implement the same function as @samp{cat -s}, that is squeezing "
"blank lines."
msgstr ""

#. type: Plain text
#: sed.texi:4387
msgid ""
"The first leaves a blank line at the beginning and end if there are some "
"already."
msgstr ""

#. type: group
#: sed.texi:4400
#, no-wrap
msgid ""
"# on empty lines, join with next\n"
"# Note there is a star in the regexp\n"
":x\n"
"/^\\n*$/ @{\n"
"N\n"
"bx\n"
"@}\n"
msgstr ""

#. type: group
#: sed.texi:4407
#, no-wrap
msgid ""
"# now, squeeze all '\\n', this can be also done by:\n"
"# s/^\\(\\n\\)*/\\1/\n"
"s/\\n*/\\\n"
"/\n"
msgstr ""

#. type: Plain text
#: sed.texi:4414
msgid ""
"This one is a bit more complex and removes all empty lines at the "
"beginning.  It does leave a single blank line at end if one was there."
msgstr ""

#. type: group
#: sed.texi:4424
#, no-wrap
msgid ""
"# delete all leading empty lines\n"
"1,/^./@{\n"
"/./!d\n"
"@}\n"
msgstr ""

#. type: group
#: sed.texi:4435
#, no-wrap
msgid ""
"# on an empty line we remove it and all the following\n"
"# empty lines, but one\n"
":x\n"
"/./!@{\n"
"N\n"
"s/^\\n$//\n"
"tx\n"
"@}\n"
msgstr ""

#. type: Plain text
#: sed.texi:4443
msgid ""
"This removes leading and trailing blank lines.  It is also the fastest.  "
"Note that loops are completely done with @code{n} and @code{b}, without "
"relying on @command{sed} to restart the script automatically at the end of a "
"line."
msgstr ""

#. type: group
#: sed.texi:4451
#, no-wrap
msgid ""
"# delete all (leading) blanks\n"
"/./!d\n"
msgstr ""

#. type: group
#: sed.texi:4462
#, no-wrap
msgid ""
"# get here: so there is a non empty\n"
":x\n"
"# print it\n"
"p\n"
"# get next\n"
"n\n"
"# got chars? print it again, etc...\n"
"/./bx\n"
msgstr ""

#. type: group
#: sed.texi:4473
#, no-wrap
msgid ""
"# no, don't have chars: got an empty line\n"
":z\n"
"# get next, if last line we finish here so no trailing\n"
"# empty lines are written\n"
"n\n"
"# also empty? then ignore it, and get next... this will\n"
"# remove ALL empty lines\n"
"/./!bz\n"
msgstr ""

#. type: group
#: sed.texi:4479
#, no-wrap
msgid ""
"# all empty lines were deleted/ignored, but we have a non empty.  As\n"
"# what we want to do is to squeeze, insert a blank line artificially\n"
"i\\\n"
msgstr ""

#. type: example
#: sed.texi:4482
#, no-wrap
msgid "bx\n"
msgstr ""

#. type: chapter
#: sed.texi:4486
#, no-wrap
msgid "@value{SSED}'s Limitations and Non-limitations"
msgstr ""

#. type: cindex
#: sed.texi:4488
#, no-wrap
msgid "@acronym{GNU} extensions, unlimited line length"
msgstr ""

#. type: cindex
#: sed.texi:4489
#, no-wrap
msgid "Portability, line length limitations"
msgstr ""

#. type: Plain text
#: sed.texi:4499
msgid ""
"For those who want to write portable @command{sed} scripts, be aware that "
"some implementations have been known to limit line lengths (for the pattern "
"and hold spaces)  to be no more than 4000 bytes.  The @sc{posix} standard "
"specifies that conforming @command{sed} implementations shall support at "
"least 8192 byte line lengths.  @value{SSED} has no built-in limit on line "
"length; as long as it can @code{malloc()} more (virtual) memory, you can "
"feed or construct lines as long as you like."
msgstr ""

#. type: Plain text
#: sed.texi:4503
msgid ""
"However, recursion is used to handle subpatterns and indefinite repetition.  "
"This means that the available stack space may limit the size of the buffer "
"that can be processed by certain patterns."
msgstr ""

#. type: chapter
#: sed.texi:4506
#, no-wrap
msgid "Other Resources for Learning About @command{sed}"
msgstr ""

#. type: cindex
#: sed.texi:4508
#, no-wrap
msgid "Additional reading about @command{sed}"
msgstr ""

#. type: Plain text
#: sed.texi:4514
msgid ""
"In addition to several books that have been written about @command{sed} "
"(either specifically or as chapters in books which discuss shell "
"programming), one can find out more about @command{sed} (including "
"suggestions of a few books) from the FAQ for the @code{sed-users} mailing "
"list, available from:"
msgstr ""

#. type: display
#: sed.texi:4516
#, no-wrap
msgid "@uref{http://sed.sourceforge.net/sedfaq.html}\n"
msgstr ""

#. type: Plain text
#: sed.texi:4522
msgid ""
"Also of interest are "
"@uref{http://www.student.northpark.edu/pemente/sed/index.htm} and "
"@uref{http://sed.sf.net/grabbag}, which include @command{sed} tutorials and "
"other @command{sed}-related goodies."
msgstr ""

#. type: Plain text
#: sed.texi:4526
msgid ""
"The @code{sed-users} mailing list itself maintained by Sven Guckes.  To "
"subscribe, visit @uref{http://groups.yahoo.com} and search for the "
"@code{sed-users} mailing list."
msgstr ""

#. type: cindex
#: sed.texi:4530
#, no-wrap
msgid "Bugs, reporting"
msgstr ""

#. type: Plain text
#: sed.texi:4534
msgid ""
"Email bug reports to @email{bug-sed@@gnu.org}.  Also, please include the "
"output of @samp{sed --version} in the body of your report if at all "
"possible."
msgstr ""

#. type: Plain text
#: sed.texi:4536
msgid "Please do not send a bug report like this:"
msgstr ""

#. type: example
#: sed.texi:4541
#, no-wrap
msgid ""
"@i{@i{@r{while building frobme-1.3.4}}}\n"
"$ configure\n"
"@error{} sed: file sedscr line 1: Unknown option to 's'\n"
msgstr ""

#. type: Plain text
#: sed.texi:4547
msgid ""
"If @value{SSED} doesn't configure your favorite package, take a few extra "
"minutes to identify the specific problem and make a stand-alone test case.  "
"Unlike other programs such as C compilers, making such test cases for "
"@command{sed} is quite simple."
msgstr ""

#. type: Plain text
#: sed.texi:4554
msgid ""
"A stand-alone test case includes all the data necessary to perform the test, "
"and the specific invocation of @command{sed} that causes the problem.  The "
"smaller a stand-alone test case is, the better.  A test case should not "
"involve something as far removed from @command{sed} as ``try to configure "
"frobme-1.3.4''.  Yes, that is in principle enough information to look for "
"the bug, but that is not a very practical prospect."
msgstr ""

#. type: Plain text
#: sed.texi:4556
msgid "Here are a few commonly reported bugs that are not bugs."
msgstr ""

#. type: anchor{#1}
#: sed.texi:4559
msgid "N_command_last_line"
msgstr ""

#. type: item
#: sed.texi:4559
#, no-wrap
msgid "@code{N} command on the last line"
msgstr ""

#. type: cindex
#: sed.texi:4560
#, no-wrap
msgid "Portability, @code{N} command on the last line"
msgstr ""

#. type: cindex
#: sed.texi:4561
#, no-wrap
msgid "Non-bugs, @code{N} command on the last line"
msgstr ""

#. type: table
#: sed.texi:4568
msgid ""
"Most versions of @command{sed} exit without printing anything when the "
"@command{N} command is issued on the last line of a file.  @value{SSED} "
"prints pattern space before exiting unless of course the @command{-n} "
"command switch has been specified.  This choice is by design."
msgstr ""

#. type: table
#: sed.texi:4570
msgid "Default behavior (gnu extension, non-POSIX conforming):"
msgstr ""

#. type: example
#: sed.texi:4575
#, no-wrap
msgid ""
"$ seq 3 | sed N\n"
"1\n"
"2\n"
"3\n"
msgstr ""

#. type: table
#: sed.texi:4578
msgid "To force POSIX-conforming behavior:"
msgstr ""

#. type: example
#: sed.texi:4582
#, no-wrap
msgid ""
"$ seq 3 | sed --posix N\n"
"1\n"
"2\n"
msgstr ""

#. type: table
#: sed.texi:4585
msgid "For example, the behavior of"
msgstr ""

#. type: example
#: sed.texi:4587
#, no-wrap
msgid "sed N foo bar\n"
msgstr ""

#. type: table
#: sed.texi:4595
msgid ""
"would depend on whether foo has an even or an odd number of "
"lines@footnote{which is the actual ``bug'' that prompted the change in "
"behavior}.  Or, when writing a script to read the next few lines following a "
"pattern match, traditional implementations of @code{sed} would force you to "
"write something like"
msgstr ""

#. type: example
#: sed.texi:4597
#, no-wrap
msgid "/foo/@{ $!N; $!N; $!N; $!N; $!N; $!N; $!N; $!N; $!N @}\n"
msgstr ""

#. type: table
#: sed.texi:4600
msgid "instead of just"
msgstr ""

#. type: example
#: sed.texi:4602
#, no-wrap
msgid "/foo/@{ N;N;N;N;N;N;N;N;N; @}\n"
msgstr ""

#. type: cindex
#: sed.texi:4604
#, no-wrap
msgid "@code{POSIXLY_CORRECT} behavior, @code{N} command"
msgstr ""

#. type: table
#: sed.texi:4608
msgid ""
"In any case, the simplest workaround is to use @code{$d;N} in scripts that "
"rely on the traditional behavior, or to set the @code{POSIXLY_CORRECT} "
"variable to a non-empty value."
msgstr ""

#. type: item
#: sed.texi:4609
#, no-wrap
msgid "Regex syntax clashes (problems with backslashes)"
msgstr ""

#. type: cindex
#: sed.texi:4611
#, no-wrap
msgid "Non-bugs, regex syntax clashes"
msgstr ""

#. type: table
#: sed.texi:4617
msgid ""
"@command{sed} uses the @sc{posix} basic regular expression syntax.  "
"According to the standard, the meaning of some escape sequences is undefined "
"in this syntax; notable in the case of @command{sed} are @code{\\|}, "
"@code{\\+}, @code{\\?}, @code{\\`}, @code{\\'}, @code{\\<}, @code{\\>}, "
"@code{\\b}, @code{\\B}, @code{\\w}, and @code{\\W}."
msgstr ""

#. type: table
#: sed.texi:4622
msgid ""
"As in all @acronym{GNU} programs that use @sc{posix} basic regular "
"expressions, @command{sed} interprets these escape sequences as special "
"characters.  So, @code{x\\+} matches one or more occurrences of @samp{x}.  "
"@code{abc\\|def} matches either @samp{abc} or @samp{def}."
msgstr ""

#. type: table
#: sed.texi:4630
msgid ""
"This syntax may cause problems when running scripts written for other "
"@command{sed}s.  Some @command{sed} programs have been written with the "
"assumption that @code{\\|} and @code{\\+} match the literal characters "
"@code{|} and @code{+}.  Such scripts must be modified by removing the "
"spurious backslashes if they are to be used with modern implementations of "
"@command{sed}, like @acronym{GNU} @command{sed}."
msgstr ""

#. type: table
#: sed.texi:4640
msgid ""
"On the other hand, some scripts use s|abc\\|def||g to remove occurrences of "
"@emph{either} @code{abc} or @code{def}.  While this worked until "
"@command{sed} 4.0.x, newer versions interpret this as removing the string "
"@code{abc|def}.  This is again undefined behavior according to "
"@acronym{POSIX}, and this interpretation is arguably more robust: older "
"@command{sed}s, for example, required that the regex matcher parsed "
"@code{\\/} as @code{/} in the common case of escaping a slash, which is "
"again undefined behavior; the new behavior avoids this, and this is good "
"because the regex matcher is only partially under our control."
msgstr ""

#. type: table
#: sed.texi:4647
msgid ""
"In addition, this version of @command{sed} supports several escape "
"characters (some of which are multi-character) to insert non-printable "
"characters in scripts (@code{\\a}, @code{\\c}, @code{\\d}, @code{\\o}, "
"@code{\\r}, @code{\\t}, @code{\\v}, @code{\\x}).  These can cause similar "
"problems with scripts written for other @command{sed}s."
msgstr ""

#. type: item
#: sed.texi:4648
#, no-wrap
msgid "@option{-i} clobbers read-only files"
msgstr ""

#. type: cindex
#: sed.texi:4649
#, no-wrap
msgid "In-place editing"
msgstr ""

#. type: cindex
#: sed.texi:4651
#, no-wrap
msgid "Non-bugs, in-place editing"
msgstr ""

#. type: table
#: sed.texi:4658
msgid ""
"In short, @samp{sed -i} will let you delete the contents of a read-only "
"file, and in general the @option{-i} option (@pxref{Invoking sed, , "
"Invocation}) lets you clobber protected files.  This is not a bug, but "
"rather a consequence of how the Unix file system works."
msgstr ""

#. type: table
#: sed.texi:4670
msgid ""
"The permissions on a file say what can happen to the data in that file, "
"while the permissions on a directory say what can happen to the list of "
"files in that directory.  @samp{sed -i} will not ever open for writing a "
"file that is already on disk.  Rather, it will work on a temporary file that "
"is finally renamed to the original name: if you rename or delete files, "
"you're actually modifying the contents of the directory, so the operation "
"depends on the permissions of the directory, not of the file.  For this same "
"reason, @command{sed} does not let you use @option{-i} on a writable file in "
"a read-only directory, and will break hard or symbolic links when "
"@option{-i} is used on such a file."
msgstr ""

#. type: item
#: sed.texi:4671
#, no-wrap
msgid "@code{0a} does not work (gives an error)"
msgstr ""

#. type: cindex
#: sed.texi:4672
#, no-wrap
msgid "@code{0} address"
msgstr ""

#. type: cindex
#: sed.texi:4674
#, no-wrap
msgid "Non-bugs, @code{0} address"
msgstr ""

#. type: table
#: sed.texi:4683
msgid ""
"There is no line 0.  0 is a special address that is only used to treat "
"addresses like @code{0,/@var{RE}/} as active when the script starts: if you "
"write @code{1,/abc/d} and the first line includes the word @samp{abc}, then "
"that match would be ignored because address ranges must span at least two "
"lines (barring the end of the file); but what you probably wanted is to "
"delete every line up to the first one including @samp{abc}, and this is "
"obtained with @code{0,/abc/d}."
msgstr ""

#. type: item
#: sed.texi:4685
#, no-wrap
msgid "@code{[a-z]} is case insensitive"
msgstr ""

#. type: cindex
#: sed.texi:4686 sed.texi:4706
#, no-wrap
msgid "Non-bugs, localization-related"
msgstr ""

#. type: ifclear
#: sed.texi:4692
msgid ""
"You are encountering problems with locales.  POSIX mandates that "
"@code{[a-z]} uses the current locale's collation order -- in C parlance, "
"that means using @code{strcoll(3)} instead of @code{strcmp(3)}.  Some "
"locales have a case-insensitive collation order, others don't."
msgstr ""

#. type: ifclear
#: sed.texi:4701
msgid ""
"Another problem is that @code{[a-z]} tries to use collation symbols.  This "
"only happens if you are on the @acronym{GNU} system, using @acronym{GNU} "
"libc's regular expression matcher instead of compiling the one supplied with "
"@acronym{GNU} sed.  In a Danish locale, for example, the regular expression "
"@code{^[a-z]$} matches the string @samp{aa}, because this is a single "
"collating symbol that comes after @samp{a} and before @samp{b}; @samp{ll} "
"behaves similarly in Spanish locales, or @samp{ij} in Dutch locales."
msgstr ""

#. type: ifclear
#: sed.texi:4704 sed.texi:4720
msgid ""
"To work around these problems, which may cause bugs in shell scripts, set "
"the @env{LC_COLLATE} and @env{LC_CTYPE} environment variables to @samp{C}."
msgstr ""

#. type: item
#: sed.texi:4705
#, no-wrap
msgid "@code{s/.*//} does not clear pattern space"
msgstr ""

#. type: ifclear
#: sed.texi:4717
msgid ""
"This happens if your input stream includes invalid multibyte sequences.  "
"@sc{posix} mandates that such sequences are @emph{not} matched by @samp{.}, "
"so that @samp{s/.*//} will not clear pattern space as you would expect.  In "
"fact, there is no way to clear sed's buffers in the middle of the script in "
"most multibyte locales (including UTF-8 locales).  For this reason, "
"@value{SSED} provides a `z' command (for `zap') as an extension."
msgstr ""

#. type: include
#: sed.texi:4730
#, no-wrap
msgid "fdl.texi"
msgstr ""

#. type: Plain text
#: sed.texi:4739
msgid ""
"This is a general index of all issues discussed in this manual, with the "
"exception of the @command{sed} commands and command-line options."
msgstr ""

#. type: Plain text
#: sed.texi:4748
msgid ""
"This is an alphabetical list of all @command{sed} commands and command-line "
"options."
msgstr ""
